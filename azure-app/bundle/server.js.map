{"version":3,"file":"server.js","sources":["../../../out/sdk/wasp/dist/universal/ansiColors.js","../../../out/sdk/wasp/dist/env/validation.js","../../../out/sdk/wasp/dist/server/env.js","../../../out/sdk/wasp/dist/universal/url.js","../../../out/sdk/wasp/dist/server/config.js","../../../out/sdk/wasp/dist/server/dbClient.js","../../../out/sdk/wasp/dist/server/HttpError.js","../../../out/sdk/wasp/dist/auth/lucia.js","../../../out/sdk/wasp/dist/auth/password.js","../../../out/sdk/wasp/dist/server/utils.js","../../../out/sdk/wasp/dist/auth/validation.js","../../../out/sdk/wasp/dist/auth/utils.js","../../../out/sdk/wasp/dist/server/auth/user.js","../../../out/sdk/wasp/dist/auth/session.js","../../../out/sdk/wasp/dist/core/auth.js","../../../out/sdk/wasp/dist/core/serialization/prisma.js","../../../out/sdk/wasp/dist/universal/predicates.js","../../../out/sdk/wasp/dist/auth/user.js","../src/middleware/operations.ts","../../../../src/server/utils.ts","../../../../src/payment/plans.ts","../../../../src/server/validation.ts","../../../../src/user/operations.ts","../src/actions/updateIsUserAdminById.ts","../src/routes/operations/updateIsUserAdminById.js","../../../../src/demo-ai-app/operations.ts","../src/actions/generateChatbotResponse.ts","../src/routes/operations/generateChatbotResponse.js","../../../../src/payment/stripe/stripeClient.ts","../../../../src/shared/utils.ts","../../../../src/payment/stripe/checkoutUtils.ts","../../../../src/payment/stripe/paymentDetails.ts","../../../out/sdk/wasp/dist/server/email/core/helpers.js","../../../out/sdk/wasp/dist/server/email/core/providers/smtp.js","../../../out/sdk/wasp/dist/server/email/index.js","../../../../src/payment/errors.ts","../../../../src/payment/stripe/webhookPayload.ts","../../../../src/payment/stripe/webhook.ts","../../../../src/payment/stripe/paymentProcessor.ts","../../../../src/payment/paymentProcessor.ts","../../../../src/payment/operations.ts","../src/actions/generateCheckoutSession.ts","../src/routes/operations/generateCheckoutSession.js","../../../../src/file-upload/validation.ts","../../../../src/file-upload/s3Utils.ts","../../../../src/file-upload/operations.ts","../src/actions/createFile.ts","../src/routes/operations/createFile.js","../src/queries/getPaginatedUsers.ts","../src/routes/operations/getPaginatedUsers.js","../src/queries/getCustomerPortalUrl.ts","../src/routes/operations/getCustomerPortalUrl.js","../src/queries/getAllFilesByUser.ts","../src/routes/operations/getAllFilesByUser.js","../src/queries/getDownloadFileSignedURL.ts","../src/routes/operations/getDownloadFileSignedURL.js","../../../../src/analytics/operations.ts","../src/queries/getDailyStats.ts","../src/routes/operations/getDailyStats.js","../src/routes/operations/index.js","../src/middleware/globalMiddleware.ts","../src/routes/auth/me.ts","../src/routes/auth/logout.ts","../src/auth/hooks.ts","../src/auth/providers/email/login.ts","../../../out/sdk/wasp/dist/auth/jwt.js","../../../out/sdk/wasp/dist/server/auth/email/utils.js","../src/auth/providers/email/signup.ts","../src/auth/providers/email/requestPasswordReset.ts","../src/auth/providers/email/resetPassword.ts","../src/auth/providers/email/verifyEmail.ts","../../../out/sdk/wasp/dist/auth/providers/types.js","../../../../src/auth/userSignupFields.ts","../../../../src/auth/email-and-pass/emails.ts","../src/auth/providers/config/email.ts","../src/auth/providers/index.ts","../src/routes/auth/index.js","../../../../src/payment/webhook.ts","../src/routes/apis/index.ts","../src/routes/index.js","../src/app.js","../../../out/sdk/wasp/dist/server/jobs/core/pgBoss/pgBoss.js","../../../out/sdk/wasp/dist/server/jobs/core/job.js","../../../out/sdk/wasp/dist/server/jobs/core/pgBoss/pgBossJob.js","../../../../src/analytics/providers/plausibleAnalyticsUtils.ts","../../../../src/analytics/stats.ts","../../../out/sdk/wasp/dist/server/jobs/dailyStatsJob.js","../src/jobs/dailyStatsJob.ts","../src/server.ts"],"sourcesContent":["export const colors = {\n    red: '\\x1b[31m',\n    yellow: '\\x1b[33m',\n};\nexport const resetColor = \"\\x1b[0m\";\n// PRIVATE API (SDK, client)\n// Used with console.log() to colorize the output\n// Example: console.log(getColorizedConsoleFormatString('red'), 'This is red text');\nexport function getColorizedConsoleFormatString(colorKey) {\n    const color = colors[colorKey];\n    return `${color}%s${resetColor}`;\n}\n//# sourceMappingURL=ansiColors.js.map","import { getColorizedConsoleFormatString } from 'wasp/universal/ansiColors';\nconst redColorFormatString = getColorizedConsoleFormatString('red');\n// PRIVATE API (SDK)\nexport function ensureEnvSchema(data, schema) {\n    const result = getValidatedEnvOrError(data, schema);\n    if (result.success) {\n        return result.data;\n    }\n    else {\n        console.error(`${redColorFormatString}${formatZodEnvErrors(result.error.issues)}`);\n        throw new Error('Error parsing environment variables');\n    }\n}\n// PRIVATE API (SDK, Vite config)\nexport function getValidatedEnvOrError(env, schema) {\n    return schema.safeParse(env);\n}\n// PRIVATE API (SDK, Vite config)\nexport function formatZodEnvErrors(issues) {\n    const errorOutput = ['', '══ Env vars validation failed ══', ''];\n    for (const error of issues) {\n        errorOutput.push(` - ${error.message}`);\n    }\n    errorOutput.push('');\n    errorOutput.push('════════════════════════════════');\n    return errorOutput.join('\\n');\n}\n//# sourceMappingURL=validation.js.map","import * as z from 'zod';\nimport { ensureEnvSchema } from '../env/validation.js';\nconst userServerEnvSchema = z.object({});\nconst waspServerCommonSchema = z.object({\n    PORT: z.coerce.number().default(3001),\n    DATABASE_URL: z.string({\n        required_error: 'DATABASE_URL is required',\n    }),\n    PG_BOSS_NEW_OPTIONS: z.string().optional(),\n    SMTP_HOST: z.string({\n        required_error: getRequiredEnvVarErrorMessage('SMTP email sender', 'SMTP_HOST'),\n    }),\n    SMTP_PORT: z.coerce.number({\n        required_error: getRequiredEnvVarErrorMessage('SMTP email sender', 'SMTP_PORT'),\n        invalid_type_error: 'SMTP_PORT must be a number',\n    }),\n    SMTP_USERNAME: z.string({\n        required_error: getRequiredEnvVarErrorMessage('SMTP email sender', 'SMTP_USERNAME'),\n    }),\n    SMTP_PASSWORD: z.string({\n        required_error: getRequiredEnvVarErrorMessage('SMTP email sender', 'SMTP_PASSWORD'),\n    }),\n    SKIP_EMAIL_VERIFICATION_IN_DEV: z\n        .enum(['true', 'false'], {\n        message: 'SKIP_EMAIL_VERIFICATION_IN_DEV must be either \"true\" or \"false\"',\n    })\n        .transform((value) => value === 'true')\n        .default('false'),\n});\nconst serverUrlSchema = z\n    .string({\n    required_error: 'WASP_SERVER_URL is required',\n})\n    .url({\n    message: 'WASP_SERVER_URL must be a valid URL',\n});\nconst clientUrlSchema = z\n    .string({\n    required_error: 'WASP_WEB_CLIENT_URL is required',\n})\n    .url({\n    message: 'WASP_WEB_CLIENT_URL must be a valid URL',\n});\nconst jwtTokenSchema = z\n    .string({\n    required_error: 'JWT_SECRET is required',\n});\n// In development, we provide default values for some environment variables\n// to make the development process easier.\nconst serverDevSchema = z.object({\n    NODE_ENV: z.literal('development'),\n    WASP_SERVER_URL: serverUrlSchema\n        .default('http://localhost:3001'),\n    WASP_WEB_CLIENT_URL: clientUrlSchema\n        .default('http://localhost:3000/'),\n    JWT_SECRET: jwtTokenSchema\n        .default('DEVJWTSECRET'),\n});\nconst serverProdSchema = z.object({\n    NODE_ENV: z.literal('production'),\n    WASP_SERVER_URL: serverUrlSchema,\n    WASP_WEB_CLIENT_URL: clientUrlSchema,\n    JWT_SECRET: jwtTokenSchema,\n});\nconst serverCommonSchema = userServerEnvSchema.merge(waspServerCommonSchema);\nconst serverEnvSchema = z.discriminatedUnion('NODE_ENV', [\n    serverDevSchema.merge(serverCommonSchema),\n    serverProdSchema.merge(serverCommonSchema)\n]);\n// PUBLIC API\nexport const env = ensureEnvSchema({ NODE_ENV: serverDevSchema.shape.NODE_ENV.value, ...process.env }, serverEnvSchema);\nfunction getRequiredEnvVarErrorMessage(featureName, envVarName) {\n    return `${envVarName} is required when using ${featureName}`;\n}\n//# sourceMappingURL=env.js.map","export function stripTrailingSlash(url) {\n    return url?.replace(/\\/$/, \"\");\n}\n//# sourceMappingURL=url.js.map","import { env } from './env.js';\nimport { stripTrailingSlash } from '../universal/url.js';\nconst frontendUrl = stripTrailingSlash(env.WASP_WEB_CLIENT_URL);\nconst serverUrl = stripTrailingSlash(env.WASP_SERVER_URL);\nconst allowedCORSOriginsPerEnv = {\n    development: '*',\n    production: [frontendUrl]\n};\nconst allowedCORSOrigins = allowedCORSOriginsPerEnv[env.NODE_ENV];\nconst config = {\n    frontendUrl,\n    serverUrl,\n    allowedCORSOrigins,\n    env: env.NODE_ENV,\n    isDevelopment: env.NODE_ENV === 'development',\n    port: env.PORT,\n    databaseUrl: env.DATABASE_URL,\n    auth: {\n        jwtSecret: env.JWT_SECRET\n    }\n};\n// PUBLIC API\nexport default config;\n//# sourceMappingURL=config.js.map","import { PrismaClient as InternalPrismaClient } from '@prisma/client';\nfunction createDbClient() {\n    return new InternalPrismaClient();\n}\nconst dbClient = createDbClient();\n// PUBLIC API\nexport default dbClient;\n//# sourceMappingURL=dbClient.js.map","export class HttpError extends Error {\n    statusCode;\n    data;\n    constructor(statusCode, message, data, options) {\n        super(message, options);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, HttpError);\n        }\n        this.name = this.constructor.name;\n        if (!(Number.isInteger(statusCode) && statusCode >= 400 && statusCode < 600)) {\n            throw new Error('statusCode has to be integer in range [400, 600).');\n        }\n        this.statusCode = statusCode;\n        if (data) {\n            this.data = data;\n        }\n    }\n}\n//# sourceMappingURL=HttpError.js.map","import { Lucia } from \"lucia\";\nimport { PrismaAdapter } from \"@lucia-auth/adapter-prisma\";\nimport { prisma } from 'wasp/server';\nconst prismaAdapter = new PrismaAdapter(prisma.session, prisma.auth);\n// PRIVATE API\n/**\n * We are using Lucia for session management.\n *\n * Some details:\n * 1. We are using the Prisma adapter for Lucia.\n * 2. We are not using cookies for session management. Instead, we are using\n *    the Authorization header to send the session token.\n * 3. Our `Session` entity is connected to the `Auth` entity.\n * 4. We are exposing the `userId` field from the `Auth` entity to\n *    make fetching the User easier.\n */\nexport const auth = new Lucia(prismaAdapter, {\n    // Since we are not using cookies, we don't need to set any cookie options.\n    // But in the future, if we decide to use cookies, we can set them here.\n    // sessionCookie: {\n    //   name: \"session\",\n    //   expires: true,\n    //   attributes: {\n    //     secure: !config.isDevelopment,\n    //     sameSite: \"lax\",\n    //   },\n    // },\n    getUserAttributes({ userId }) {\n        return {\n            userId,\n        };\n    },\n});\n//# sourceMappingURL=lucia.js.map","import { hash, verify } from \"@node-rs/argon2\";\n// The options are the same as the ones used in the oslo/password library\nconst hashingOptions = {\n    memoryCost: 19456,\n    timeCost: 2,\n    outputLen: 32,\n    parallelism: 1,\n    version: 1 /* Version.V0x13 */,\n};\n// PRIVATE API\nexport async function hashPassword(password) {\n    return hash(normalizePassword(password), hashingOptions);\n}\n// PRIVATE API\nexport async function verifyPassword(hashedPassword, password) {\n    const validPassword = await verify(hashedPassword, normalizePassword(password), hashingOptions);\n    if (!validPassword) {\n        throw new Error(\"Invalid password\");\n    }\n}\n// We are normalising the password to ensure that the password is always hashed in the same way\n// We have the same normalising process as oslo/password did in the past\nfunction normalizePassword(password) {\n    return password.normalize(\"NFKC\");\n}\n//# sourceMappingURL=password.js.map","/**\n * Simple helper to give the correct types for Express handlers.\n * We define it in the same file as our extension to Request\n * so that it is picked up by TypeScript.\n */\nexport const defineHandler = (middleware) => middleware;\nexport const sleep = (ms) => new Promise((r) => setTimeout(r, ms));\nexport function redirect(res, redirectUri) {\n    return res\n        .status(302)\n        .setHeader(\"Location\", redirectUri)\n        .end();\n}\n//# sourceMappingURL=utils.js.map","import { HttpError } from 'wasp/server';\nexport const PASSWORD_FIELD = 'password';\nconst USERNAME_FIELD = 'username';\nconst EMAIL_FIELD = 'email';\nconst TOKEN_FIELD = 'token';\n// PUBLIC API\nexport function ensureValidEmail(args) {\n    validate(args, [\n        { validates: EMAIL_FIELD, message: 'email must be present', validator: email => !!email },\n        { validates: EMAIL_FIELD, message: 'email must be a valid email', validator: email => isValidEmail(email) },\n    ]);\n}\n// PUBLIC API\nexport function ensureValidUsername(args) {\n    validate(args, [\n        { validates: USERNAME_FIELD, message: 'username must be present', validator: username => !!username }\n    ]);\n}\n// PUBLIC API\nexport function ensurePasswordIsPresent(args) {\n    validate(args, [\n        { validates: PASSWORD_FIELD, message: 'password must be present', validator: password => !!password },\n    ]);\n}\n// PUBLIC API\nexport function ensureValidPassword(args) {\n    validate(args, [\n        { validates: PASSWORD_FIELD, message: 'password must be at least 8 characters', validator: password => isMinLength(password, 8) },\n        { validates: PASSWORD_FIELD, message: 'password must contain a number', validator: password => containsNumber(password) },\n    ]);\n}\n// PUBLIC API\nexport function ensureTokenIsPresent(args) {\n    validate(args, [\n        { validates: TOKEN_FIELD, message: 'token must be present', validator: token => !!token },\n    ]);\n}\n// PRIVATE API\nexport function throwValidationError(message) {\n    throw new HttpError(422, 'Validation failed', { message });\n}\nfunction validate(args, validators) {\n    for (const { validates, message, validator } of validators) {\n        if (!validator(args[validates])) {\n            throwValidationError(message);\n        }\n    }\n}\n// NOTE(miho): it would be good to replace our custom validations with e.g. Zod\nconst validEmailRegex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\nfunction isValidEmail(input) {\n    if (typeof input !== 'string') {\n        return false;\n    }\n    return input.match(validEmailRegex) !== null;\n}\nfunction isMinLength(input, minLength) {\n    if (typeof input !== 'string') {\n        return false;\n    }\n    return input.length >= minLength;\n}\nfunction containsNumber(input) {\n    if (typeof input !== 'string') {\n        return false;\n    }\n    return /\\d/.test(input);\n}\n//# sourceMappingURL=validation.js.map","import { hashPassword } from './password.js';\nimport { prisma, HttpError } from 'wasp/server';\nimport { sleep } from 'wasp/server/utils';\nimport { Prisma } from '@prisma/client';\nimport { throwValidationError } from './validation.js';\n// PRIVATE API\nexport const contextWithUserEntity = {\n    entities: {\n        User: prisma.user\n    }\n};\n// PRIVATE API\nexport const authConfig = {\n    failureRedirectPath: \"/login\",\n    successRedirectPath: \"/demo-app\",\n};\n// PUBLIC API\nexport function createProviderId(providerName, providerUserId) {\n    return {\n        providerName,\n        providerUserId: normalizeProviderUserId(providerName, providerUserId),\n    };\n}\n// PRIVATE API\nexport function normalizeProviderUserId(providerName, providerUserId) {\n    switch (providerName) {\n        case 'email':\n        case 'username':\n            return providerUserId.toLowerCase();\n        case 'google':\n        case 'github':\n        case 'discord':\n        case 'keycloak':\n        case 'slack':\n            return providerUserId;\n        /*\n          Why the default case?\n          In case users add a new auth provider in the user-land.\n          Users can't extend this function because it is private.\n          If there is an unknown `providerName` in runtime, we'll\n          return the `providerUserId` as is.\n    \n          We want to still have explicit OAuth providers listed\n          so that we get a type error if we forget to add a new provider\n          to the switch statement.\n        */\n        default:\n            providerName;\n            return providerUserId;\n    }\n}\n// PUBLIC API\nexport async function findAuthIdentity(providerId) {\n    return prisma.authIdentity.findUnique({\n        where: {\n            providerName_providerUserId: providerId,\n        }\n    });\n}\n// PUBLIC API\n/**\n * Updates the provider data for the given auth identity.\n *\n * This function performs data sanitization and serialization.\n * Sanitization is done by hashing the password, so this function\n * expects the password received in the `providerDataUpdates`\n * **not to be hashed**.\n */\nexport async function updateAuthIdentityProviderData(providerId, existingProviderData, providerDataUpdates) {\n    // We are doing the sanitization here only on updates to avoid\n    // hashing the password multiple times.\n    const sanitizedProviderDataUpdates = await ensurePasswordIsHashed(providerDataUpdates);\n    const newProviderData = {\n        ...existingProviderData,\n        ...sanitizedProviderDataUpdates,\n    };\n    const serializedProviderData = await serializeProviderData(newProviderData);\n    return prisma.authIdentity.update({\n        where: {\n            providerName_providerUserId: providerId,\n        },\n        data: { providerData: serializedProviderData },\n    });\n}\n// PRIVATE API\nexport async function findAuthWithUserBy(where) {\n    const result = await prisma.auth.findFirst({ where, include: { user: true } });\n    if (result === null) {\n        return null;\n    }\n    if (result.user === null) {\n        return null;\n    }\n    return { ...result, user: result.user };\n}\n// PUBLIC API\nexport async function createUser(providerId, serializedProviderData, userFields) {\n    return prisma.user.create({\n        data: {\n            // Using any here to prevent type errors when userFields are not\n            // defined. We want Prisma to throw an error in that case.\n            ...(userFields ?? {}),\n            auth: {\n                create: {\n                    identities: {\n                        create: {\n                            providerName: providerId.providerName,\n                            providerUserId: providerId.providerUserId,\n                            providerData: serializedProviderData,\n                        },\n                    },\n                }\n            },\n        },\n        // We need to include the Auth entity here because we need `authId`\n        // to be able to create a session.\n        include: {\n            auth: true,\n        },\n    });\n}\n// PRIVATE API\nexport async function deleteUserByAuthId(authId) {\n    return prisma.user.deleteMany({ where: { auth: {\n                id: authId,\n            } } });\n}\n// PRIVATE API\n// If an user exists, we don't want to leak information\n// about it. Pretending that we're doing some work\n// will make it harder for an attacker to determine\n// if a user exists or not.\n// NOTE: Attacker measuring time to response can still determine\n// if a user exists or not. We'll be able to avoid it when \n// we implement e-mail sending via jobs.\nexport async function doFakeWork() {\n    const timeToWork = Math.floor(Math.random() * 1000) + 1000;\n    return sleep(timeToWork);\n}\n// PRIVATE API\nexport function rethrowPossibleAuthError(e) {\n    // Prisma code P2002 is for unique constraint violations.\n    if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2002') {\n        throw new HttpError(422, 'Save failed', {\n            message: `user with the same identity already exists`,\n        });\n    }\n    if (e instanceof Prisma.PrismaClientValidationError) {\n        // NOTE: Logging the error since this usually means that there are\n        // required fields missing in the request, we want the developer\n        // to know about it.\n        console.error(e);\n        throw new HttpError(422, 'Save failed', {\n            message: 'there was a database error'\n        });\n    }\n    // Prisma code P2021 is for missing table errors.\n    if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2021') {\n        // NOTE: Logging the error since this usually means that the database\n        // migrations weren't run, we want the developer to know about it.\n        console.error(e);\n        console.info('🐝 This error can happen if you did\\'t run the database migrations.');\n        throw new HttpError(500, 'Save failed', {\n            message: `there was a database error`,\n        });\n    }\n    // Prisma code P2003 is for foreign key constraint failure\n    if (e instanceof Prisma.PrismaClientKnownRequestError && e.code === 'P2003') {\n        console.error(e);\n        console.info(`🐝 This error can happen if you have some relation on your User entity\n   but you didn't specify the \"onDelete\" behaviour to either \"Cascade\" or \"SetNull\".\n   Read more at: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions`);\n        throw new HttpError(500, 'Save failed', {\n            message: `there was a database error`,\n        });\n    }\n    throw e;\n}\n// PRIVATE API\nexport async function validateAndGetUserFields(data, userSignupFields) {\n    const { password: _password, ...sanitizedData } = data;\n    const result = {};\n    if (!userSignupFields) {\n        return result;\n    }\n    for (const [field, getFieldValue] of Object.entries(userSignupFields)) {\n        try {\n            const value = await getFieldValue(sanitizedData);\n            result[field] = value;\n        }\n        catch (e) {\n            throwValidationError(e.message);\n        }\n    }\n    return result;\n}\n// PUBLIC API\nexport function getProviderData(providerData) {\n    return sanitizeProviderData(getProviderDataWithPassword(providerData));\n}\n// PUBLIC API\nexport function getProviderDataWithPassword(providerData) {\n    // NOTE: We are letting JSON.parse throw an error if the providerData is not valid JSON.\n    return JSON.parse(providerData);\n}\nfunction sanitizeProviderData(providerData) {\n    if (providerDataHasPasswordField(providerData)) {\n        const { hashedPassword, ...rest } = providerData;\n        return rest;\n    }\n    else {\n        return providerData;\n    }\n}\n// PUBLIC API\nexport async function sanitizeAndSerializeProviderData(providerData) {\n    return serializeProviderData(await ensurePasswordIsHashed(providerData));\n}\nfunction serializeProviderData(providerData) {\n    return JSON.stringify(providerData);\n}\nasync function ensurePasswordIsHashed(providerData) {\n    const data = {\n        ...providerData,\n    };\n    if (providerDataHasPasswordField(data)) {\n        data.hashedPassword = await hashPassword(data.hashedPassword);\n    }\n    return data;\n}\nfunction providerDataHasPasswordField(providerData) {\n    return 'hashedPassword' in providerData;\n}\n// PRIVATE API\nexport function createInvalidCredentialsError(message) {\n    return new HttpError(401, 'Invalid credentials', { message });\n}\n//# sourceMappingURL=utils.js.map","import { getProviderData, } from '../../auth/utils.js';\n// PRIVATE API\nexport function createAuthUserData(user) {\n    const { auth, ...rest } = user;\n    if (!auth) {\n        throw new Error(`🐝 Error: trying to create a user without auth data.\nThis should never happen, but it did which means there is a bug in the code.`);\n    }\n    const identities = {\n        email: getProviderInfo(auth, 'email'),\n    };\n    return {\n        ...rest,\n        identities,\n    };\n}\nfunction getProviderInfo(auth, providerName) {\n    const identity = getIdentity(auth, providerName);\n    if (!identity) {\n        return null;\n    }\n    return {\n        ...getProviderData(identity.providerData),\n        id: identity.providerUserId,\n    };\n}\nfunction getIdentity(auth, providerName) {\n    return auth.identities.find((i) => i.providerName === providerName) ?? null;\n}\n//# sourceMappingURL=user.js.map","import { auth } from \"./lucia.js\";\nimport { createInvalidCredentialsError } from \"./utils.js\";\nimport { prisma } from 'wasp/server';\nimport { createAuthUserData } from \"../server/auth/user.js\";\n// PRIVATE API\n// Creates a new session for the `authId` in the database\nexport async function createSession(authId) {\n    return auth.createSession(authId, {});\n}\n// PRIVATE API\nexport async function getSessionAndUserFromBearerToken(req) {\n    const authorizationHeader = req.headers[\"authorization\"];\n    if (typeof authorizationHeader !== \"string\") {\n        return null;\n    }\n    const sessionId = auth.readBearerToken(authorizationHeader);\n    if (!sessionId) {\n        return null;\n    }\n    return getSessionAndUserFromSessionId(sessionId);\n}\n// PRIVATE API\nexport async function getSessionAndUserFromSessionId(sessionId) {\n    const { session, user: authEntity } = await auth.validateSession(sessionId);\n    if (!session || !authEntity) {\n        return null;\n    }\n    return {\n        session,\n        user: await getAuthUserData(authEntity.userId)\n    };\n}\nasync function getAuthUserData(userId) {\n    const user = await prisma.user\n        .findUnique({\n        where: { id: userId },\n        include: {\n            auth: {\n                include: {\n                    identities: true\n                }\n            }\n        }\n    });\n    if (!user) {\n        throw createInvalidCredentialsError();\n    }\n    return createAuthUserData(user);\n}\n// PRIVATE API\nexport function invalidateSession(sessionId) {\n    return auth.invalidateSession(sessionId);\n}\n//# sourceMappingURL=session.js.map","import { getSessionAndUserFromBearerToken } from 'wasp/auth/session';\nimport { createInvalidCredentialsError } from 'wasp/auth/utils';\nimport { defineHandler } from 'wasp/server/utils';\n/**\n * Auth middleware\n *\n * If the request includes an `Authorization` header it will try to authenticate the request,\n * otherwise it will let the request through.\n *\n * - If authentication succeeds it sets `req.sessionId` and `req.user`\n *   - `req.user` is the user that made the request and it's used in\n *      all Wasp features that need to know the user that made the request.\n *   - `req.sessionId` is the ID of the session that authenticated the request.\n * - If the request is not authenticated, it throws an error.\n */\nconst auth = defineHandler(async (req, res, next) => {\n    const authHeader = req.get('Authorization');\n    // NOTE(matija): for now we let tokenless requests through and make it operation's\n    // responsibility to verify whether the request is authenticated or not. In the future\n    // we will develop our own system at Wasp-level for that.\n    if (!authHeader) {\n        req.sessionId = null;\n        req.user = null;\n        return next();\n    }\n    const sessionAndUser = await getSessionAndUserFromBearerToken(req);\n    if (sessionAndUser === null) {\n        throw createInvalidCredentialsError();\n    }\n    req.sessionId = sessionAndUser.session.id;\n    req.user = sessionAndUser.user;\n    next();\n});\nexport default auth;\n//# sourceMappingURL=auth.js.map","import { Prisma } from \"@prisma/client\";\nimport { registerCustom } from \"superjson\";\nimport \"./custom-register\";\nconst Decimal = Prisma.Decimal;\n/*\n  And finally, if we have the `Decimal` type because the Prisma schema is using it,\n  we register it as a custom type with SuperJSON.\n  Based on https://github.com/flightcontrolhq/superjson/blob/v2.2.2/README.md#decimaljs--prismadecimal\n*/\nif (Decimal) {\n    registerCustom({\n        isApplicable: (v) => Decimal.isDecimal(v),\n        serialize: (v) => v.toJSON(),\n        deserialize: (v) => new Decimal(v),\n    }, \"prisma.decimal\");\n}\n//# sourceMappingURL=prisma.js.map","export function isNotNull(value) {\n    return value !== null;\n}\n//# sourceMappingURL=predicates.js.map","import { isNotNull } from '../universal/predicates.js';\n/**\n * We split the user.ts code into two files to avoid some server-only\n * code (Oslo's hashing functions) being imported on the client.\n */\n// PUBLIC API\nexport function getEmail(user) {\n    return findUserIdentity(user, \"email\")?.providerUserId ?? null;\n}\n// PUBLIC API\nexport function getUsername(user) {\n    return findUserIdentity(user, \"username\")?.providerUserId ?? null;\n}\n// PUBLIC API\nexport function getFirstProviderUserId(user) {\n    if (!user || !user.auth || !user.auth.identities || user.auth.identities.length === 0) {\n        return null;\n    }\n    return user.auth.identities[0].providerUserId ?? null;\n}\nexport function makeAuthUserIfPossible(user) {\n    return user ? makeAuthUser(user) : null;\n}\nfunction makeAuthUser(data) {\n    return {\n        ...data,\n        getFirstProviderUserId: () => {\n            const identities = Object.values(data.identities).filter(isNotNull);\n            return identities.length > 0 ? identities[0].id : null;\n        },\n    };\n}\nfunction findUserIdentity(user, providerName) {\n    if (!user.auth) {\n        return null;\n    }\n    return user.auth.identities.find((identity) => identity.providerName === providerName) ?? null;\n}\n//# sourceMappingURL=user.js.map","import { deserialize, serialize } from 'wasp/core/serialization'\nimport { defineHandler } from 'wasp/server/utils'\nimport { makeAuthUserIfPossible } from 'wasp/auth/user'\n\nexport function createOperation (handlerFn) {\n    return defineHandler(async (req, res) => {\n        const args = (req.body && deserialize(req.body)) || {}\n        const context = {\n            user: makeAuthUserIfPossible(req.user),\n        }\n        const result = await handlerFn(args, context)\n        const serializedResult = serialize(result)\n        res.json(serializedResult)\n    })\n}\n\nexport function createQuery(handlerFn) {\n    return createOperation(handlerFn)\n}\n\nexport function createAction(handlerFn) {\n    return createOperation(handlerFn)\n}\n","export function requireNodeEnvVar(name: string): string {\n  const value = process.env[name];\n  if (value === undefined) {\n    throw new Error(`Env var ${name} is undefined`);\n  } else {\n    return value;\n  }\n}\n","import { requireNodeEnvVar } from '../server/utils';\n\nexport enum SubscriptionStatus {\n  PastDue = 'past_due',\n  CancelAtPeriodEnd = 'cancel_at_period_end',\n  Active = 'active',\n  Deleted = 'deleted',\n}\n\nexport enum PaymentPlanId {\n  Hobby = 'hobby',\n  Pro = 'pro',\n  Credits10 = 'credits10',\n}\n\nexport interface PaymentPlan {\n  // Returns the id under which this payment plan is identified on your payment processor.\n  // E.g. this might be price id on Stripe, or variant id on LemonSqueezy.\n  getPaymentProcessorPlanId: () => string;\n  effect: PaymentPlanEffect;\n}\n\nexport type PaymentPlanEffect = { kind: 'subscription' } | { kind: 'credits'; amount: number };\n\nexport const paymentPlans: Record<PaymentPlanId, PaymentPlan> = {\n  [PaymentPlanId.Hobby]: {\n    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_HOBBY_SUBSCRIPTION_PLAN_ID'),\n    effect: { kind: 'subscription' },\n  },\n  [PaymentPlanId.Pro]: {\n    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_PRO_SUBSCRIPTION_PLAN_ID'),\n    effect: { kind: 'subscription' },\n  },\n  [PaymentPlanId.Credits10]: {\n    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_CREDITS_10_PLAN_ID'),\n    effect: { kind: 'credits', amount: 10 },\n  },\n};\n\nexport function prettyPaymentPlanName(planId: PaymentPlanId): string {\n  const planToName: Record<PaymentPlanId, string> = {\n    [PaymentPlanId.Hobby]: 'Hobby',\n    [PaymentPlanId.Pro]: 'Pro',\n    [PaymentPlanId.Credits10]: '10 Credits',\n  };\n  return planToName[planId];\n}\n\nexport function parsePaymentPlanId(planId: string): PaymentPlanId {\n  if ((Object.values(PaymentPlanId) as string[]).includes(planId)) {\n    return planId as PaymentPlanId;\n  } else {\n    throw new Error(`Invalid PaymentPlanId: ${planId}`);\n  }\n}\n\nexport function getSubscriptionPaymentPlanIds(): PaymentPlanId[] {\n  return Object.values(PaymentPlanId).filter((planId) => paymentPlans[planId].effect.kind === 'subscription');\n}\n","import { HttpError } from 'wasp/server';\nimport * as z from 'zod';\n\nexport function ensureArgsSchemaOrThrowHttpError<Schema extends z.ZodType>(\n  schema: Schema,\n  rawArgs: unknown\n): z.infer<Schema> {\n  const parseResult = schema.safeParse(rawArgs);\n  if (!parseResult.success) {\n    console.error(parseResult.error);\n    throw new HttpError(400, 'Operation arguments validation failed', { errors: parseResult.error.errors });\n  } else {\n    return parseResult.data;\n  }\n}\n","import * as z from 'zod';\nimport { type UpdateIsUserAdminById, type GetPaginatedUsers } from 'wasp/server/operations';\nimport { type User } from 'wasp/entities';\nimport { HttpError, prisma } from 'wasp/server';\nimport { SubscriptionStatus } from '../payment/plans';\nimport { type Prisma } from '@prisma/client';\nimport { ensureArgsSchemaOrThrowHttpError } from '../server/validation';\n\nconst updateUserAdminByIdInputSchema = z.object({\n  id: z.string().nonempty(),\n  isAdmin: z.boolean(),\n});\n\ntype UpdateUserAdminByIdInput = z.infer<typeof updateUserAdminByIdInputSchema>;\n\nexport const updateIsUserAdminById: UpdateIsUserAdminById<UpdateUserAdminByIdInput, User> = async (\n  rawArgs,\n  context\n) => {\n  const { id, isAdmin } = ensureArgsSchemaOrThrowHttpError(updateUserAdminByIdInputSchema, rawArgs);\n\n  if (!context.user) {\n    throw new HttpError(401, 'Only authenticated users are allowed to perform this operation');\n  }\n\n  if (!context.user.isAdmin) {\n    throw new HttpError(403, 'Only admins are allowed to perform this operation');\n  }\n\n  return context.entities.User.update({\n    where: { id },\n    data: { isAdmin },\n  });\n};\n\ntype GetPaginatedUsersOutput = {\n  users: Pick<\n    User,\n    'id' | 'email' | 'username' | 'subscriptionStatus' | 'paymentProcessorUserId' | 'isAdmin'\n  >[];\n  totalPages: number;\n};\n\nconst getPaginatorArgsSchema = z.object({\n  skipPages: z.number(),\n  filter: z.object({\n    emailContains: z.string().nonempty().optional(),\n    isAdmin: z.boolean().optional(),\n    subscriptionStatusIn: z.array(z.nativeEnum(SubscriptionStatus).nullable()).optional(),\n  }),\n});\n\ntype GetPaginatedUsersInput = z.infer<typeof getPaginatorArgsSchema>;\n\nexport const getPaginatedUsers: GetPaginatedUsers<GetPaginatedUsersInput, GetPaginatedUsersOutput> = async (\n  rawArgs,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401, 'Only authenticated users are allowed to perform this operation');\n  }\n\n  if (!context.user.isAdmin) {\n    throw new HttpError(403, 'Only admins are allowed to perform this operation');\n  }\n\n  const {\n    skipPages,\n    filter: { subscriptionStatusIn: subscriptionStatus, emailContains, isAdmin },\n  } = ensureArgsSchemaOrThrowHttpError(getPaginatorArgsSchema, rawArgs);\n\n  const includeUnsubscribedUsers = !!subscriptionStatus?.some((status) => status === null);\n  const desiredSubscriptionStatuses = subscriptionStatus?.filter((status) => status !== null);\n\n  const pageSize = 10;\n\n  const userPageQuery: Prisma.UserFindManyArgs = {\n    skip: skipPages * pageSize,\n    take: pageSize,\n    where: {\n      AND: [\n        {\n          email: {\n            contains: emailContains,\n            mode: 'insensitive',\n          },\n          isAdmin,\n        },\n        {\n          OR: [\n            {\n              subscriptionStatus: {\n                in: desiredSubscriptionStatuses,\n              },\n            },\n            {\n              subscriptionStatus: includeUnsubscribedUsers ? null : undefined,\n            },\n          ],\n        },\n      ],\n    },\n    select: {\n      id: true,\n      email: true,\n      username: true,\n      isAdmin: true,\n      subscriptionStatus: true,\n      paymentProcessorUserId: true,\n    },\n    orderBy: {\n      username: 'asc',\n    },\n  };\n\n  const [pageOfUsers, totalUsers] = await prisma.$transaction([\n    context.entities.User.findMany(userPageQuery),\n    context.entities.User.count({ where: userPageQuery.where }),\n  ]);\n  const totalPages = Math.ceil(totalUsers / pageSize);\n\n  return {\n    users: pageOfUsers,\n    totalPages,\n  };\n};\n","import { prisma } from 'wasp/server'\n\nimport { updateIsUserAdminById } from '../../../../../src/user/operations'\n\n\nexport default async function (args, context) {\n  return (updateIsUserAdminById as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport updateIsUserAdminById from '../../actions/updateIsUserAdminById.js'\n\nexport default createAction(updateIsUserAdminById)\n","import * as z from 'zod';\nimport type { Task, GptResponse, User } from 'wasp/entities';\nimport { HttpError, prisma } from 'wasp/server';\n\nimport OpenAI from 'openai';                                // ✅ eklendi\nimport { ensureArgsSchemaOrThrowHttpError } from '../server/validation'; // ✅ eklendi\n\n/* ---------- OpenAI Kurulumu ---------- */\nconst openAi = setUpOpenAi();\nfunction setUpOpenAi(): OpenAI {\n  if (process.env.OPENAI_API_KEY) {\n    return new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n  } else {\n    throw new Error('OpenAI API key is not set');\n  }\n}\n\n/* ---------- Chatbot Action ---------- */\nconst generateChatbotResponseInputSchema = z.object({\n  messages: z.array(\n    z.object({\n      role: z.enum(['system', 'user', 'assistant']),\n      content: z.string(),\n    })\n  ),\n});\n\nexport const generateChatbotResponse = async (\n  rawArgs: unknown,\n  context: any\n): Promise<string> => {\n  if (!context.user) throw new HttpError(401, 'Giriş yapmalısınız.');\n\n  const { messages } = generateChatbotResponseInputSchema.parse(rawArgs);\n\n  const completion = await openAi.chat.completions.create({\n    model: 'gpt-3.5-turbo',\n    messages,\n    temperature: 0.8,\n  });\n\n  return completion.choices[0].message?.content ?? '';\n};\n/* ---------- /Chatbot Action ---------- */","import { prisma } from 'wasp/server'\n\nimport { generateChatbotResponse } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (generateChatbotResponse as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport generateChatbotResponse from '../../actions/generateChatbotResponse.js'\n\nexport default createAction(generateChatbotResponse)\n","import Stripe from 'stripe';\nimport { requireNodeEnvVar } from '../../server/utils';\n\nexport const stripe = new Stripe(requireNodeEnvVar('STRIPE_API_KEY'), {\n  // NOTE:\n  // API version below should ideally match the API version in your Stripe dashboard.\n  // If that is not the case, you will most likely want to (up/down)grade the `stripe`\n  // npm package to the API version that matches your Stripe dashboard's one.\n  // For more details and alternative setups check\n  // https://docs.stripe.com/api/versioning .\n  apiVersion: '2022-11-15',\n});\n","/**\n * Used purely to help compiler check for exhaustiveness in switch statements,\n * will never execute. See https://stackoverflow.com/a/39419171.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function assertUnreachable(x: never): never {\n  throw Error('This code should be unreachable');\n}\n","import type { StripeMode } from './paymentProcessor';\n\nimport Stripe from 'stripe';\nimport { stripe } from './stripeClient';\nimport { assertUnreachable } from '../../shared/utils';\n\n// WASP_WEB_CLIENT_URL will be set up by Wasp when deploying to production: https://wasp.sh/docs/deploying\nconst DOMAIN = process.env.WASP_WEB_CLIENT_URL || 'http://localhost:3000';\n\nexport async function fetchStripeCustomer(customerEmail: string) {\n  let customer: Stripe.Customer;\n  try {\n    const stripeCustomers = await stripe.customers.list({\n      email: customerEmail,\n    });\n    if (!stripeCustomers.data.length) {\n      console.log('creating customer');\n      customer = await stripe.customers.create({\n        email: customerEmail,\n      });\n    } else {\n      console.log('using existing customer');\n      customer = stripeCustomers.data[0];\n    }\n    return customer;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\ninterface CreateStripeCheckoutSessionParams {\n  priceId: string;\n  customerId: string;\n  mode: StripeMode;\n}\n\nexport async function createStripeCheckoutSession({\n  priceId,\n  customerId,\n  mode,\n}: CreateStripeCheckoutSessionParams) {\n  try {\n    const paymentIntentData = getPaymentIntentData({ mode, priceId });\n\n    return await stripe.checkout.sessions.create({\n      line_items: [\n        {\n          price: priceId,\n          quantity: 1,\n        },\n      ],\n      mode: mode,\n      success_url: `${DOMAIN}/checkout?success=true`,\n      cancel_url: `${DOMAIN}/checkout?canceled=true`,\n      automatic_tax: { enabled: true },\n      customer_update: {\n        address: 'auto',\n      },\n      customer: customerId,\n      // Stripe only allows us to pass payment intent metadata for one-time payments, not subscriptions.\n      // We do this so that we can capture priceId in the payment_intent.succeeded webhook\n      // and easily confirm the user's payment based on the price id. For subscriptions, we can get the price id\n      // in the customer.subscription.updated webhook via the line_items field.\n      payment_intent_data: paymentIntentData,\n    });\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\nfunction getPaymentIntentData({ mode, priceId }: { mode: StripeMode; priceId: string }):\n  | {\n      metadata: { priceId: string };\n    }\n  | undefined {\n  switch (mode) {\n    case 'subscription':\n      return undefined;\n    case 'payment':\n      return { metadata: { priceId } };\n    default:\n      assertUnreachable(mode);\n  }\n}\n","import type { SubscriptionStatus } from '../plans';\nimport { PaymentPlanId } from '../plans';\nimport { PrismaClient } from '@prisma/client';\n\nexport const updateUserStripePaymentDetails = (\n  { userStripeId, subscriptionPlan, subscriptionStatus, datePaid, numOfCreditsPurchased }: {\n    userStripeId: string;\n    subscriptionPlan?: PaymentPlanId;\n    subscriptionStatus?: SubscriptionStatus;\n    numOfCreditsPurchased?: number;\n    datePaid?: Date;\n  },\n  userDelegate: PrismaClient['user']\n) => {\n  return userDelegate.update({\n    where: {\n      paymentProcessorUserId: userStripeId\n    },\n    data: {\n      paymentProcessorUserId: userStripeId,\n      subscriptionPlan,\n      subscriptionStatus,\n      datePaid,\n      credits: numOfCreditsPurchased !== undefined ? { increment: numOfCreditsPurchased } : undefined,\n    },\n  });\n};\n","// PRIVATE API\n// Formats an email address and an optional name into a string that can be used\n// as the \"from\" field in an email.\n// { email: \"test@test.com, name: \"Test\" } -> \"Test <test@test.com>\"\nexport function formatFromField({ email, name, }) {\n    if (name) {\n        return `${name} <${email}>`;\n    }\n    return email;\n}\n// PRIVATE API\nexport function getDefaultFromField() {\n    return {\n        email: \"no-reply@opensaas.com\",\n        name: \"Open SaaS App\",\n    };\n}\n//# sourceMappingURL=helpers.js.map","import { createTransport } from \"nodemailer\";\nimport { formatFromField, getDefaultFromField } from \"../helpers.js\";\n// PRIVATE API\nexport function initSmtpEmailSender(config) {\n    const transporter = createTransport({\n        host: config.host,\n        port: config.port,\n        auth: {\n            user: config.username,\n            pass: config.password,\n        },\n    });\n    const defaultFromField = getDefaultFromField();\n    return {\n        async send(email) {\n            return transporter.sendMail({\n                from: formatFromField(email.from || defaultFromField),\n                to: email.to,\n                subject: email.subject,\n                text: email.text,\n                html: email.html,\n            });\n        },\n    };\n}\n//# sourceMappingURL=smtp.js.map","import { env } from '../env.js';\nimport { initEmailSender } from \"./core/index.js\";\nconst emailProvider = {\n    type: \"smtp\",\n    host: env.SMTP_HOST,\n    port: env.SMTP_PORT,\n    username: env.SMTP_USERNAME,\n    password: env.SMTP_PASSWORD,\n};\n// PUBLIC API\nexport const emailSender = initEmailSender(emailProvider);\n//# sourceMappingURL=index.js.map","export class UnhandledWebhookEventError extends Error {\n  constructor(eventType: string) {\n    super(`Unhandled event type: ${eventType}`);\n    this.name = 'UnhandledWebhookEventError';\n  }\n}\n","import * as z from 'zod';\nimport { Stripe } from 'stripe';\nimport { UnhandledWebhookEventError } from '../errors';\nimport { HttpError } from 'wasp/server';\n\nexport async function parseWebhookPayload(rawStripeEvent: Stripe.Event) {\n  try {\n    const event = await genericStripeEventSchema.parseAsync(rawStripeEvent);\n    switch (event.type) {\n      case 'checkout.session.completed':\n        const session = await sessionCompletedDataSchema.parseAsync(event.data.object);\n        return { eventName: event.type, data: session };\n      case 'invoice.paid':\n        const invoice = await invoicePaidDataSchema.parseAsync(event.data.object);\n        return { eventName: event.type, data: invoice };\n      case 'payment_intent.succeeded':\n        const paymentIntent = await paymentIntentSucceededDataSchema.parseAsync(event.data.object);\n        return { eventName: event.type, data: paymentIntent };\n      case 'customer.subscription.updated':\n        const updatedSubscription = await subscriptionUpdatedDataSchema.parseAsync(event.data.object);\n        return { eventName: event.type, data: updatedSubscription };\n      case 'customer.subscription.deleted':\n        const deletedSubscription = await subscriptionDeletedDataSchema.parseAsync(event.data.object);\n        return { eventName: event.type, data: deletedSubscription };\n      default:\n        // If you'd like to handle more events, you can add more cases above.\n        throw new UnhandledWebhookEventError(event.type);\n    }\n  } catch (e: unknown) {\n    if (e instanceof UnhandledWebhookEventError) {\n      throw e;\n    } else {\n      console.error(e);\n      throw new HttpError(400, 'Error parsing Stripe event object');\n    }\n  }\n}\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.Event\n */\nconst genericStripeEventSchema = z.object({\n  type: z.string(),\n  data: z.object({\n    object: z.unknown(),\n  }),\n});\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.Checkout.Session\n */\nconst sessionCompletedDataSchema = z.object({\n  id: z.string(),\n  customer: z.string(),\n});\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.Invoice\n */\nconst invoicePaidDataSchema = z.object({\n  customer: z.string(),\n  period_start: z.number(),\n});\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.PaymentIntent\n */\nconst paymentIntentSucceededDataSchema = z.object({\n  invoice: z.unknown().optional(),\n  created: z.number(),\n  metadata: z.object({\n    priceId: z.string().optional(),\n  }),\n  customer: z.string(),\n});\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.Subscription\n */\nconst subscriptionUpdatedDataSchema = z.object({\n  customer: z.string(),\n  status: z.string(),\n  cancel_at_period_end: z.boolean(),\n  items: z.object({\n    data: z.array(\n      z.object({\n        price: z.object({\n          id: z.string(),\n        }),\n      })\n    ),\n  }),\n});\n\n/**\n * This is a subtype of\n * @type import('stripe').Stripe.Subscription\n */\nconst subscriptionDeletedDataSchema = z.object({\n  customer: z.string(),\n});\n\nexport type SessionCompletedData = z.infer<typeof sessionCompletedDataSchema>;\n\nexport type InvoicePaidData = z.infer<typeof invoicePaidDataSchema>;\n\nexport type PaymentIntentSucceededData = z.infer<typeof paymentIntentSucceededDataSchema>;\n\nexport type SubscriptionUpdatedData = z.infer<typeof subscriptionUpdatedDataSchema>;\n\nexport type SubscriptionDeletedData = z.infer<typeof subscriptionDeletedDataSchema>;\n","import { type MiddlewareConfigFn, HttpError } from 'wasp/server';\nimport { type PaymentsWebhook } from 'wasp/server/api';\nimport { type PrismaClient } from '@prisma/client';\nimport express from 'express';\nimport type { Stripe } from 'stripe';\nimport { stripe } from './stripeClient';\nimport { paymentPlans, PaymentPlanId, SubscriptionStatus, type PaymentPlanEffect } from '../plans';\nimport { updateUserStripePaymentDetails } from './paymentDetails';\nimport { emailSender } from 'wasp/server/email';\nimport { assertUnreachable } from '../../shared/utils';\nimport { requireNodeEnvVar } from '../../server/utils';\nimport { z } from 'zod';\nimport {\n  parseWebhookPayload,\n  type InvoicePaidData,\n  type PaymentIntentSucceededData,\n  type SessionCompletedData,\n  type SubscriptionDeletedData,\n  type SubscriptionUpdatedData,\n} from './webhookPayload';\nimport { UnhandledWebhookEventError } from '../errors';\n\nexport const stripeWebhook: PaymentsWebhook = async (request, response, context) => {\n  try {\n    const rawStripeEvent = constructStripeEvent(request);\n    const { eventName, data } = await parseWebhookPayload(rawStripeEvent);\n    const prismaUserDelegate = context.entities.User;\n    switch (eventName) {\n      case 'checkout.session.completed':\n        await handleCheckoutSessionCompleted(data, prismaUserDelegate);\n        break;\n      case 'invoice.paid':\n        await handleInvoicePaid(data, prismaUserDelegate);\n        break;\n      case 'payment_intent.succeeded':\n        await handlePaymentIntentSucceeded(data, prismaUserDelegate);\n        break;\n      case 'customer.subscription.updated':\n        await handleCustomerSubscriptionUpdated(data, prismaUserDelegate);\n        break;\n      case 'customer.subscription.deleted':\n        await handleCustomerSubscriptionDeleted(data, prismaUserDelegate);\n        break;\n      default:\n        // If you'd like to handle more events, you can add more cases above.\n        // When deploying your app, you configure your webhook in the Stripe dashboard to only send the events that you're\n        // handling above and that are necessary for the functioning of your app. See: https://docs.opensaas.sh/guides/deploying/#setting-up-your-stripe-webhook\n        // In development, it is likely that you will receive other events that you are not handling, and that's fine. These can be ignored without any issues.\n        assertUnreachable(eventName);\n    }\n    return response.json({ received: true }); // Stripe expects a 200 response to acknowledge receipt of the webhook\n  } catch (err) {\n    if (err instanceof UnhandledWebhookEventError) {\n      console.error(err.message);\n      return response.status(422).json({ error: err.message });\n    }\n\n    console.error('Webhook error:', err);\n    if (err instanceof HttpError) {\n      return response.status(err.statusCode).json({ error: err.message });\n    } else {\n      return response.status(400).json({ error: 'Error processing Stripe webhook event' });\n    }\n  }\n};\n\nfunction constructStripeEvent(request: express.Request): Stripe.Event {\n  try {\n    const secret = requireNodeEnvVar('STRIPE_WEBHOOK_SECRET');\n    const sig = request.headers['stripe-signature'];\n    if (!sig) {\n      throw new HttpError(400, 'Stripe webhook signature not provided');\n    }\n    return stripe.webhooks.constructEvent(request.body, sig, secret);\n  } catch (err) {\n    throw new HttpError(500, 'Error constructing Stripe webhook event');\n  }\n}\n\nexport const stripeMiddlewareConfigFn: MiddlewareConfigFn = (middlewareConfig) => {\n  // We need to delete the default 'express.json' middleware and replace it with 'express.raw' middleware\n  // because webhook data in the body of the request as raw JSON, not as JSON in the body of the request.\n  middlewareConfig.delete('express.json');\n  middlewareConfig.set('express.raw', express.raw({ type: 'application/json' }));\n  return middlewareConfig;\n};\n\n// Because a checkout session completed could potentially result in a failed payment,\n// we can update the user's payment details here, but confirm credits or a subscription\n// if the payment succeeds in other, more specific, webhooks.\nexport async function handleCheckoutSessionCompleted(\n  session: SessionCompletedData,\n  prismaUserDelegate: PrismaClient['user']\n) {\n  const userStripeId = session.customer;\n  const lineItems = await getSubscriptionLineItemsBySessionId(session.id);\n\n  const lineItemPriceId = extractPriceId(lineItems);\n\n  const planId = getPlanIdByPriceId(lineItemPriceId);\n  const plan = paymentPlans[planId];\n  if (plan.effect.kind === 'credits') {\n    return;\n  }\n  const { subscriptionPlan } = getPlanEffectPaymentDetails({ planId, planEffect: plan.effect });\n\n  return updateUserStripePaymentDetails({ userStripeId, subscriptionPlan }, prismaUserDelegate);\n}\n\n// This is called when a subscription is purchased or renewed and payment succeeds.\n// Invoices are not created for one-time payments, so we handle them in the payment_intent.succeeded webhook.\nexport async function handleInvoicePaid(invoice: InvoicePaidData, prismaUserDelegate: PrismaClient['user']) {\n  const userStripeId = invoice.customer;\n  const datePaid = new Date(invoice.period_start * 1000);\n  return updateUserStripePaymentDetails({ userStripeId, datePaid }, prismaUserDelegate);\n}\n\nexport async function handlePaymentIntentSucceeded(\n  paymentIntent: PaymentIntentSucceededData,\n  prismaUserDelegate: PrismaClient['user']\n) {\n  // We handle invoices in the invoice.paid webhook. Invoices exist for subscription payments,\n  // but not for one-time payment/credits products which use the Stripe `payment` mode on checkout sessions.\n  if (paymentIntent.invoice) {\n    return;\n  }\n\n  const userStripeId = paymentIntent.customer;\n  const datePaid = new Date(paymentIntent.created * 1000);\n\n  // We capture the price id from the payment intent metadata\n  // that we passed in when creating the checkout session in checkoutUtils.ts.\n  const { metadata } = paymentIntent;\n\n  if (!metadata.priceId) {\n    throw new HttpError(400, 'No price id found in payment intent');\n  }\n\n  const planId = getPlanIdByPriceId(metadata.priceId);\n  const plan = paymentPlans[planId];\n  if (plan.effect.kind === 'subscription') {\n    return;\n  }\n\n  const { numOfCreditsPurchased } = getPlanEffectPaymentDetails({ planId, planEffect: plan.effect });\n\n  return updateUserStripePaymentDetails(\n    { userStripeId, numOfCreditsPurchased, datePaid },\n    prismaUserDelegate\n  );\n}\n\nexport async function handleCustomerSubscriptionUpdated(\n  subscription: SubscriptionUpdatedData,\n  prismaUserDelegate: PrismaClient['user']\n) {\n  const userStripeId = subscription.customer;\n  let subscriptionStatus: SubscriptionStatus | undefined;\n\n  const priceId = extractPriceId(subscription.items);\n  const subscriptionPlan = getPlanIdByPriceId(priceId);\n\n  // There are other subscription statuses, such as `trialing` that we are not handling and simply ignore\n  // If you'd like to handle more statuses, you can add more cases above. Make sure to update the `SubscriptionStatus` type in `payment/plans.ts` as well\n  if (subscription.status === SubscriptionStatus.Active) {\n    subscriptionStatus = subscription.cancel_at_period_end\n      ? SubscriptionStatus.CancelAtPeriodEnd\n      : SubscriptionStatus.Active;\n  } else if (subscription.status === SubscriptionStatus.PastDue) {\n    subscriptionStatus = SubscriptionStatus.PastDue;\n  }\n  if (subscriptionStatus) {\n    const user = await updateUserStripePaymentDetails(\n      { userStripeId, subscriptionPlan, subscriptionStatus },\n      prismaUserDelegate\n    );\n    if (subscription.cancel_at_period_end) {\n      if (user.email) {\n        await emailSender.send({\n          to: user.email,\n          subject: 'We hate to see you go :(',\n          text: 'We hate to see you go. Here is a sweet offer...',\n          html: 'We hate to see you go. Here is a sweet offer...',\n        });\n      }\n    }\n    return user;\n  }\n}\n\nexport async function handleCustomerSubscriptionDeleted(\n  subscription: SubscriptionDeletedData,\n  prismaUserDelegate: PrismaClient['user']\n) {\n  const userStripeId = subscription.customer;\n  return updateUserStripePaymentDetails(\n    { userStripeId, subscriptionStatus: SubscriptionStatus.Deleted },\n    prismaUserDelegate\n  );\n}\n\ntype SubscsriptionItems = z.infer<typeof subscriptionItemsSchema>;\n\nconst subscriptionItemsSchema = z.object({\n  data: z.array(\n    z.object({\n      price: z.object({\n        id: z.string(),\n      }),\n    })\n  ),\n});\n\nfunction extractPriceId(items: SubscsriptionItems): string {\n  if (items.data.length === 0) {\n    throw new HttpError(400, 'No items in stripe event object');\n  }\n  if (items.data.length > 1) {\n    throw new HttpError(400, 'More than one item in stripe event object');\n  }\n  return items.data[0].price.id;\n}\n\nasync function getSubscriptionLineItemsBySessionId(sessionId: string) {\n  try {\n    const { line_items: lineItemsRaw } = await stripe.checkout.sessions.retrieve(sessionId, {\n      expand: ['line_items'],\n    });\n\n    const lineItems = await subscriptionItemsSchema.parseAsync(lineItemsRaw);\n\n    return lineItems;\n  } catch (e: unknown) {\n    throw new HttpError(500, 'Error parsing Stripe line items');\n  }\n}\n\nfunction getPlanIdByPriceId(priceId: string): PaymentPlanId {\n  const planId = Object.values(PaymentPlanId).find(\n    (planId) => paymentPlans[planId].getPaymentProcessorPlanId() === priceId\n  );\n  if (!planId) {\n    throw new Error(`No plan with Stripe price id ${priceId}`);\n  }\n  return planId;\n}\n\nfunction getPlanEffectPaymentDetails({\n  planId,\n  planEffect,\n}: {\n  planId: PaymentPlanId;\n  planEffect: PaymentPlanEffect;\n}): {\n  subscriptionPlan: PaymentPlanId | undefined;\n  numOfCreditsPurchased: number | undefined;\n} {\n  switch (planEffect.kind) {\n    case 'subscription':\n      return { subscriptionPlan: planId, numOfCreditsPurchased: undefined };\n    case 'credits':\n      return { subscriptionPlan: undefined, numOfCreditsPurchased: planEffect.amount };\n    default:\n      assertUnreachable(planEffect);\n  }\n}\n","import type { PaymentPlanEffect } from '../plans';\nimport type { CreateCheckoutSessionArgs, FetchCustomerPortalUrlArgs, PaymentProcessor } from '../paymentProcessor'\nimport { fetchStripeCustomer, createStripeCheckoutSession } from './checkoutUtils';\nimport { requireNodeEnvVar } from '../../server/utils';\nimport { stripeWebhook, stripeMiddlewareConfigFn } from './webhook';\n\nexport type StripeMode = 'subscription' | 'payment';\n\nexport const stripePaymentProcessor: PaymentProcessor = {\n  id: 'stripe',\n  createCheckoutSession: async ({ userId, userEmail, paymentPlan, prismaUserDelegate }: CreateCheckoutSessionArgs) => {\n    const customer = await fetchStripeCustomer(userEmail);\n    const stripeSession = await createStripeCheckoutSession({\n      priceId: paymentPlan.getPaymentProcessorPlanId(),\n      customerId: customer.id,\n      mode: paymentPlanEffectToStripeMode(paymentPlan.effect),\n    });\n    await prismaUserDelegate.update({\n      where: {\n        id: userId\n      },\n      data: {\n        paymentProcessorUserId: customer.id\n      }\n    })\n    if (!stripeSession.url) throw new Error('Error creating Stripe Checkout Session');\n    const session = {\n      url: stripeSession.url,\n      id: stripeSession.id,\n    };\n    return { session };\n  },\n  fetchCustomerPortalUrl: async (_args: FetchCustomerPortalUrlArgs) =>\n    requireNodeEnvVar('STRIPE_CUSTOMER_PORTAL_URL'),\n  webhook: stripeWebhook,\n  webhookMiddlewareConfigFn: stripeMiddlewareConfigFn,\n};\n\nfunction paymentPlanEffectToStripeMode(planEffect: PaymentPlanEffect): StripeMode {\n  const effectToMode: Record<PaymentPlanEffect['kind'], StripeMode> = {\n    subscription: 'subscription',\n    credits: 'payment',\n  };\n  return effectToMode[planEffect.kind];\n}\n","import type { PaymentPlan } from './plans';\nimport type { PaymentsWebhook } from 'wasp/server/api';\nimport type { MiddlewareConfigFn } from 'wasp/server';\nimport { PrismaClient } from '@prisma/client';\nimport { stripePaymentProcessor } from './stripe/paymentProcessor';\nimport { lemonSqueezyPaymentProcessor } from './lemonSqueezy/paymentProcessor';\n\nexport interface CreateCheckoutSessionArgs {\n  userId: string;\n  userEmail: string;\n  paymentPlan: PaymentPlan;\n  prismaUserDelegate: PrismaClient['user'];\n}\nexport interface FetchCustomerPortalUrlArgs { \n  userId: string; \n  prismaUserDelegate: PrismaClient['user']; \n};\n\nexport interface PaymentProcessor {\n  id: 'stripe' | 'lemonsqueezy';\n  createCheckoutSession: (args: CreateCheckoutSessionArgs) => Promise<{ session: { id: string; url: string }; }>; \n  fetchCustomerPortalUrl: (args: FetchCustomerPortalUrlArgs) => Promise<string | null>;\n  webhook: PaymentsWebhook;\n  webhookMiddlewareConfigFn: MiddlewareConfigFn;\n}\n\n/**\n * Choose which payment processor you'd like to use, then delete the \n * other payment processor code that you're not using  from `/src/payment`\n */\n// export const paymentProcessor: PaymentProcessor = lemonSqueezyPaymentProcessor;\nexport const paymentProcessor: PaymentProcessor = stripePaymentProcessor;\n","import * as z from 'zod';\nimport type { GenerateCheckoutSession, GetCustomerPortalUrl } from 'wasp/server/operations';\nimport { PaymentPlanId, paymentPlans } from '../payment/plans';\nimport { paymentProcessor } from './paymentProcessor';\nimport { HttpError } from 'wasp/server';\nimport { ensureArgsSchemaOrThrowHttpError } from '../server/validation';\n\nexport type CheckoutSession = {\n  sessionUrl: string | null;\n  sessionId: string;\n};\n\nconst generateCheckoutSessionSchema = z.nativeEnum(PaymentPlanId);\n\ntype GenerateCheckoutSessionInput = z.infer<typeof generateCheckoutSessionSchema>;\n\nexport const generateCheckoutSession: GenerateCheckoutSession<\n  GenerateCheckoutSessionInput,\n  CheckoutSession\n> = async (rawPaymentPlanId, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'Only authenticated users are allowed to perform this operation');\n  }\n\n  const paymentPlanId = ensureArgsSchemaOrThrowHttpError(generateCheckoutSessionSchema, rawPaymentPlanId);\n  const userId = context.user.id;\n  const userEmail = context.user.email;\n  if (!userEmail) {\n    // If using the usernameAndPassword Auth method, switch to an Auth method that provides an email.\n    throw new HttpError(403, 'User needs an email to make a payment.');\n  }\n\n  const paymentPlan = paymentPlans[paymentPlanId];\n  const { session } = await paymentProcessor.createCheckoutSession({\n    userId,\n    userEmail,\n    paymentPlan,\n    prismaUserDelegate: context.entities.User,\n  });\n\n  return {\n    sessionUrl: session.url,\n    sessionId: session.id,\n  };\n};\n\nexport const getCustomerPortalUrl: GetCustomerPortalUrl<void, string | null> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'Only authenticated users are allowed to perform this operation');\n  }\n\n  return paymentProcessor.fetchCustomerPortalUrl({\n    userId: context.user.id,\n    prismaUserDelegate: context.entities.User,\n  });\n};\n","import { prisma } from 'wasp/server'\n\nimport { generateCheckoutSession } from '../../../../../src/payment/operations'\n\n\nexport default async function (args, context) {\n  return (generateCheckoutSession as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport generateCheckoutSession from '../../actions/generateCheckoutSession.js'\n\nexport default createAction(generateCheckoutSession)\n","// Set this to the max file size you want to allow (currently 5MB).\nexport const MAX_FILE_SIZE_BYTES = 5 * 1024 * 1024;\nexport const ALLOWED_FILE_TYPES = [\n  'image/jpeg',\n  'image/png',\n  'application/pdf',\n  'text/*',\n  'video/quicktime',\n  'video/mp4',\n] as const;\n","import * as path from 'path';\nimport { randomUUID } from 'crypto';\nimport { S3Client, GetObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { createPresignedPost } from '@aws-sdk/s3-presigned-post';\nimport { MAX_FILE_SIZE_BYTES } from './validation';\n\nconst s3Client = new S3Client({\n  region: process.env.AWS_S3_REGION,\n  credentials: {\n    accessKeyId: process.env.AWS_S3_IAM_ACCESS_KEY!,\n    secretAccessKey: process.env.AWS_S3_IAM_SECRET_KEY!,\n  },\n});\n\ntype S3Upload = {\n  fileType: string;\n  fileName: string;\n  userId: string;\n};\n\nexport const getUploadFileSignedURLFromS3 = async ({ fileName, fileType, userId }: S3Upload) => {\n  const key = getS3Key(fileName, userId);\n\n  const { url: s3UploadUrl, fields: s3UploadFields } = await createPresignedPost(s3Client, {\n    Bucket: process.env.AWS_S3_FILES_BUCKET!,\n    Key: key,\n    Conditions: [['content-length-range', 0, MAX_FILE_SIZE_BYTES]],\n    Fields: {\n      'Content-Type': fileType,\n    },\n    Expires: 3600,\n  });\n\n  return { s3UploadUrl, key, s3UploadFields };\n};\n\nexport const getDownloadFileSignedURLFromS3 = async ({ key }: { key: string }) => {\n  const command = new GetObjectCommand({\n    Bucket: process.env.AWS_S3_FILES_BUCKET,\n    Key: key,\n  });\n  return await getSignedUrl(s3Client, command, { expiresIn: 3600 });\n};\n\nfunction getS3Key(fileName: string, userId: string) {\n  const ext = path.extname(fileName).slice(1);\n  return `${userId}/${randomUUID()}.${ext}`;\n}\n","import * as z from 'zod';\nimport { HttpError } from 'wasp/server';\nimport { type File } from 'wasp/entities';\nimport {\n  type CreateFile,\n  type GetAllFilesByUser,\n  type GetDownloadFileSignedURL,\n} from 'wasp/server/operations';\n\nimport { getUploadFileSignedURLFromS3, getDownloadFileSignedURLFromS3 } from './s3Utils';\nimport { ensureArgsSchemaOrThrowHttpError } from '../server/validation';\nimport { ALLOWED_FILE_TYPES } from './validation';\n\nconst createFileInputSchema = z.object({\n  fileType: z.enum(ALLOWED_FILE_TYPES),\n  fileName: z.string().nonempty(),\n});\n\ntype CreateFileInput = z.infer<typeof createFileInputSchema>;\n\nexport const createFile: CreateFile<\n  CreateFileInput,\n  {\n    s3UploadUrl: string;\n    s3UploadFields: Record<string, string>;\n  }\n> = async (rawArgs, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const { fileType, fileName } = ensureArgsSchemaOrThrowHttpError(createFileInputSchema, rawArgs);\n\n  const { s3UploadUrl, s3UploadFields, key } = await getUploadFileSignedURLFromS3({\n    fileType,\n    fileName,\n    userId: context.user.id,\n  });\n\n  await context.entities.File.create({\n    data: {\n      name: fileName,\n      key,\n      uploadUrl: s3UploadUrl,\n      type: fileType,\n      user: { connect: { id: context.user.id } },\n    },\n  });\n\n  return {\n    s3UploadUrl,\n    s3UploadFields,\n  };\n};\n\nexport const getAllFilesByUser: GetAllFilesByUser<void, File[]> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  return context.entities.File.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n    orderBy: {\n      createdAt: 'desc',\n    },\n  });\n};\n\nconst getDownloadFileSignedURLInputSchema = z.object({ key: z.string().nonempty() });\n\ntype GetDownloadFileSignedURLInput = z.infer<typeof getDownloadFileSignedURLInputSchema>;\n\nexport const getDownloadFileSignedURL: GetDownloadFileSignedURL<\n  GetDownloadFileSignedURLInput,\n  string\n> = async (rawArgs, _context) => {\n  const { key } = ensureArgsSchemaOrThrowHttpError(getDownloadFileSignedURLInputSchema, rawArgs);\n  return await getDownloadFileSignedURLFromS3({ key });\n};\n","import { prisma } from 'wasp/server'\n\nimport { createFile } from '../../../../../src/file-upload/operations'\n\n\nexport default async function (args, context) {\n  return (createFile as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createFile from '../../actions/createFile.js'\n\nexport default createAction(createFile)\n","import { prisma } from 'wasp/server'\n\nimport { getPaginatedUsers } from '../../../../../src/user/operations'\n\n\nexport default async function (args, context) {\n  return (getPaginatedUsers as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getPaginatedUsers from '../../queries/getPaginatedUsers.js'\n\nexport default createQuery(getPaginatedUsers)\n","import { prisma } from 'wasp/server'\n\nimport { getCustomerPortalUrl } from '../../../../../src/payment/operations'\n\n\nexport default async function (args, context) {\n  return (getCustomerPortalUrl as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getCustomerPortalUrl from '../../queries/getCustomerPortalUrl.js'\n\nexport default createQuery(getCustomerPortalUrl)\n","import { prisma } from 'wasp/server'\n\nimport { getAllFilesByUser } from '../../../../../src/file-upload/operations'\n\n\nexport default async function (args, context) {\n  return (getAllFilesByUser as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getAllFilesByUser from '../../queries/getAllFilesByUser.js'\n\nexport default createQuery(getAllFilesByUser)\n","import { prisma } from 'wasp/server'\n\nimport { getDownloadFileSignedURL } from '../../../../../src/file-upload/operations'\n\n\nexport default async function (args, context) {\n  return (getDownloadFileSignedURL as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getDownloadFileSignedURL from '../../queries/getDownloadFileSignedURL.js'\n\nexport default createQuery(getDownloadFileSignedURL)\n","import { type DailyStats, type PageViewSource } from 'wasp/entities';\nimport { HttpError, prisma } from 'wasp/server';\nimport { type GetDailyStats } from 'wasp/server/operations';\n\ntype DailyStatsWithSources = DailyStats & {\n  sources: PageViewSource[];\n};\n\ntype DailyStatsValues = {\n  dailyStats: DailyStatsWithSources;\n  weeklyStats: DailyStatsWithSources[];\n};\n\nexport const getDailyStats: GetDailyStats<void, DailyStatsValues | undefined> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401, 'Only authenticated users are allowed to perform this operation');\n  }\n\n  if (!context.user.isAdmin) {\n    throw new HttpError(403, 'Only admins are allowed to perform this operation');\n  }\n\n  const statsQuery = {\n    orderBy: {\n      date: 'desc',\n    },\n    include: {\n      sources: true,\n    },\n  } as const;\n\n  const [dailyStats, weeklyStats] = await prisma.$transaction([\n    context.entities.DailyStats.findFirst(statsQuery),\n    context.entities.DailyStats.findMany({ ...statsQuery, take: 7 }),\n  ]);\n\n  if (!dailyStats) {\n    console.log('\\x1b[34mNote: No daily stats have been generated by the dailyStatsJob yet. \\x1b[0m');\n    return undefined;\n  }\n\n  return { dailyStats, weeklyStats };\n};\n","import { prisma } from 'wasp/server'\n\nimport { getDailyStats } from '../../../../../src/analytics/operations'\n\n\nexport default async function (args, context) {\n  return (getDailyStats as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      DailyStats: prisma.dailyStats,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getDailyStats from '../../queries/getDailyStats.js'\n\nexport default createQuery(getDailyStats)\n","import express from 'express'\n\nimport auth from 'wasp/core/auth'\n\nimport updateIsUserAdminById from './updateIsUserAdminById.js'\nimport generateChatbotResponse from './generateChatbotResponse.js'\nimport generateCheckoutSession from './generateCheckoutSession.js'\nimport createFile from './createFile.js'\nimport getPaginatedUsers from './getPaginatedUsers.js'\nimport getCustomerPortalUrl from './getCustomerPortalUrl.js'\nimport getAllFilesByUser from './getAllFilesByUser.js'\nimport getDownloadFileSignedURL from './getDownloadFileSignedURL.js'\nimport getDailyStats from './getDailyStats.js'\n\nconst router = express.Router()\n\nrouter.post('/update-is-user-admin-by-id', auth, updateIsUserAdminById)\nrouter.post('/generate-chatbot-response', auth, generateChatbotResponse)\nrouter.post('/generate-checkout-session', auth, generateCheckoutSession)\nrouter.post('/create-file', auth, createFile)\nrouter.post('/get-paginated-users', auth, getPaginatedUsers)\nrouter.post('/get-customer-portal-url', auth, getCustomerPortalUrl)\nrouter.post('/get-all-files-by-user', auth, getAllFilesByUser)\nrouter.post('/get-download-file-signed-url', auth, getDownloadFileSignedURL)\nrouter.post('/get-daily-stats', auth, getDailyStats)\n\nexport default router\n","import express from 'express'\nimport cookieParser from 'cookie-parser'\nimport logger from 'morgan'\nimport cors from 'cors'\nimport helmet from 'helmet'\n\nimport { config } from 'wasp/server'\nimport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\nexport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\n\nconst _waspGlobalMiddlewareConfigFn = (mc: MiddlewareConfig) => mc\n\n// This is the set of middleware Wasp supplies by default.\n// NOTE: Remember to update the docs of these change.\nconst defaultGlobalMiddlewareConfig: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded()],\n  ['cookieParser', cookieParser()]\n])\n\n// This is the global middleware that is the result of applying the user's modifications.\n// It will be used as the basis for Operations and APIs (unless they are further customized).\nconst globalMiddlewareConfig: MiddlewareConfig = _waspGlobalMiddlewareConfigFn(defaultGlobalMiddlewareConfig)\n\n// This function returns an array of Express middleware to be used by a router. It optionally\n// accepts a function that can modify the global middleware for specific route customization.\nexport function globalMiddlewareConfigForExpress(middlewareConfigFn?: MiddlewareConfigFn): express.RequestHandler[] {\n  if (!middlewareConfigFn) {\n    return Array.from(globalMiddlewareConfig.values())\n  }\n\n  // Make a clone so they can't mess up the global Map for any other routes calling this.\n  const globalMiddlewareConfigClone = new Map(globalMiddlewareConfig)\n  const modifiedMiddlewareConfig = middlewareConfigFn(globalMiddlewareConfigClone)\n  return Array.from(modifiedMiddlewareConfig.values())\n}\n","import { serialize } from 'wasp/core/serialization'\nimport { defineHandler } from 'wasp/server/utils'\n\nexport default defineHandler(async (req, res) => {\n  if (req.user) {\n    res.json(serialize(req.user))\n  } else {\n    res.json(serialize(null))\n  }\n})\n","import { defineHandler } from 'wasp/server/utils'\nimport { createInvalidCredentialsError } from 'wasp/auth/utils'\nimport { invalidateSession } from 'wasp/auth/session'\n\nexport default defineHandler(async (req, res) => {\n  if (req.sessionId) {\n    await invalidateSession(req.sessionId)\n    res.json({ success: true })\n  } else {\n    throw createInvalidCredentialsError()\n  }\n})\n","import { prisma } from 'wasp/server'\nimport type {\n  OnAfterSignupHook,\n  OnAfterEmailVerifiedHook,\n  OnBeforeOAuthRedirectHook,\n  OnBeforeSignupHook,\n  OnBeforeLoginHook,\n  OnAfterLoginHook,\n  InternalAuthHookParams,\n} from 'wasp/server/auth'\n\n/*\n  These are \"internal hook functions\" based on the user defined hook functions.\n\n  In the server code (e.g. email signup) we import these functions and call them.\n\n  We want to pass extra params to the user defined hook functions, but we don't want to\n  pass them when we call them in the server code.\n*/\n\n/**\n * This is a no-op function since the user didn't define the onBeforeSignup hook.\n */\nexport const onBeforeSignupHook: InternalFunctionForHook<OnBeforeSignupHook> = async (_params) => {}\n\n/**\n * This is a no-op function since the user didn't define the onAfterSignup hook.\n */\nexport const onAfterSignupHook: InternalFunctionForHook<OnAfterSignupHook> = async (_params) => {}\n\n/**\n * This is a no-op function since the user didn't define the onAfterSignup hook.\n */\nexport const onAfterEmailVerifiedHook: InternalFunctionForHook<OnAfterEmailVerifiedHook> = async (_params) => {}\n\n/**\n * This is an identity function since the user didn't define the onBeforeOAuthRedirect hook.\n */\nexport const onBeforeOAuthRedirectHook: InternalFunctionForHook<OnBeforeOAuthRedirectHook> = async (params) => params\n\n\n/**\n * This is a no-op function since the user didn't define the onBeforeLogin hook.\n */\nexport const onBeforeLoginHook: InternalFunctionForHook<OnBeforeLoginHook> = async (_params) => {}\n\n/**\n * This is a no-op function since the user didn't define the onAfterLogin hook.\n */\nexport const onAfterLoginHook: InternalFunctionForHook<OnAfterLoginHook> = async (_params) => {}\n\n/*\n  We pass extra params to the user defined hook functions, but we don't want to\n  pass the extra params (e.g. 'prisma') when we call the hooks in the server code.\n  So, we need to remove the extra params from the params object which is used to define the\n  internal hook functions.\n*/\ntype InternalFunctionForHook<Fn extends (args: never) => unknown | Promise<unknown>> = Fn extends (\n  params: infer P,\n) => infer R\n  ? (args: Omit<P, keyof InternalAuthHookParams>) => R\n  : never\n","import { Request, Response } from 'express';\nimport { createInvalidCredentialsError } from 'wasp/auth/utils'\nimport { verifyPassword } from 'wasp/auth/password'\nimport {\n    createProviderId,\n    findAuthIdentity,\n    findAuthWithUserBy,\n    getProviderDataWithPassword,\n} from 'wasp/auth/utils'\nimport { createSession } from 'wasp/auth/session'\nimport { ensureValidEmail, ensurePasswordIsPresent } from 'wasp/auth/validation'\nimport { onBeforeLoginHook, onAfterLoginHook } from '../../hooks.js';\n\nexport function getLoginRoute() {\n    return async function login(\n        req: Request<{ email: string; password: string; }>,\n        res: Response,\n    ): Promise<void> {\n        const fields = req.body ?? {}\n        ensureValidArgs(fields)\n\n        const providerId = createProviderId(\"email\", fields.email)\n        const authIdentity = await findAuthIdentity(providerId)\n        if (!authIdentity) {\n            throw createInvalidCredentialsError()\n        }\n        const providerData = getProviderDataWithPassword<'email'>(authIdentity.providerData)\n        if (!providerData.isEmailVerified) {\n            throw createInvalidCredentialsError()\n        }\n        try {\n            await verifyPassword(providerData.hashedPassword, fields.password);\n        } catch(e) {\n            throw createInvalidCredentialsError()\n        }\n    \n        const auth = await findAuthWithUserBy({ id: authIdentity.authId })\n\n        if (auth === null) {\n            throw createInvalidCredentialsError()\n        }\n        \n        await onBeforeLoginHook({\n            req,\n            providerId,\n            user: auth.user,\n        })\n        \n        const session = await createSession(auth.id)\n\n        await onAfterLoginHook({\n            req,\n            providerId,\n            user: auth.user,\n        })\n      \n        res.json({\n            sessionId: session.id,\n        })\n    };\n}\n\nfunction ensureValidArgs(args: object): void {\n    ensureValidEmail(args);\n    ensurePasswordIsPresent(args);\n}\n","import * as jwt from 'oslo/jwt';\nimport { config } from 'wasp/server';\nconst JWT_SECRET = new TextEncoder().encode(config.auth.jwtSecret);\nconst JWT_ALGORITHM = 'HS256';\n// PRIVATE API\nexport function createJWT(data, options) {\n    return jwt.createJWT(JWT_ALGORITHM, JWT_SECRET, data, options);\n}\n// PRIVATE API\nexport async function validateJWT(token) {\n    const { payload } = await jwt.validateJWT(JWT_ALGORITHM, JWT_SECRET, token);\n    return payload;\n}\n// PRIVATE API\nexport { TimeSpan } from 'oslo';\n//# sourceMappingURL=jwt.js.map","import { createJWT, TimeSpan } from 'wasp/auth/jwt';\nimport { emailSender } from 'wasp/server/email';\nimport { createProviderId, updateAuthIdentityProviderData, findAuthIdentity, getProviderDataWithPassword, } from 'wasp/auth/utils';\nimport { config as waspServerConfig } from 'wasp/server';\n// PUBLIC API\nexport async function createEmailVerificationLink(email, clientRoute) {\n    const { jwtToken } = await createEmailJWT(email);\n    return `${waspServerConfig.frontendUrl}${clientRoute}?token=${jwtToken}`;\n}\n// PUBLIC API\nexport async function createPasswordResetLink(email, clientRoute) {\n    const { jwtToken } = await createEmailJWT(email);\n    return `${waspServerConfig.frontendUrl}${clientRoute}?token=${jwtToken}`;\n}\nasync function createEmailJWT(email) {\n    const jwtToken = await createJWT({ email }, { expiresIn: new TimeSpan(30, \"m\") });\n    return { jwtToken };\n}\n// PUBLIC API\nexport async function sendPasswordResetEmail(email, content) {\n    return sendEmailAndSaveMetadata(email, content, {\n        passwordResetSentAt: (new Date()).toISOString(),\n    });\n}\n// PUBLIC API\nexport async function sendEmailVerificationEmail(email, content) {\n    return sendEmailAndSaveMetadata(email, content, {\n        emailVerificationSentAt: (new Date()).toISOString(),\n    });\n}\nasync function sendEmailAndSaveMetadata(email, content, metadata) {\n    // Save the metadata (e.g. timestamp) first, and then send the email\n    // so the user can't send multiple requests while the email is being sent.\n    const providerId = createProviderId(\"email\", email);\n    const authIdentity = await findAuthIdentity(providerId);\n    if (!authIdentity) {\n        throw new Error(`User with email: ${email} not found.`);\n    }\n    const providerData = getProviderDataWithPassword(authIdentity.providerData);\n    await updateAuthIdentityProviderData(providerId, providerData, metadata);\n    emailSender.send(content).catch((e) => {\n        console.error('Failed to send email', e);\n    });\n}\n// PUBLIC API\nexport function isEmailResendAllowed(fields, field, resendInterval = 1000 * 60) {\n    const sentAt = fields[field];\n    if (!sentAt) {\n        return {\n            isResendAllowed: true,\n            timeLeft: 0,\n        };\n    }\n    const now = new Date();\n    const diff = now.getTime() - new Date(sentAt).getTime();\n    const isResendAllowed = diff > resendInterval;\n    // Time left in seconds\n    const timeLeft = isResendAllowed ? 0 : Math.round((resendInterval - diff) / 1000);\n    return { isResendAllowed, timeLeft };\n}\n//# sourceMappingURL=utils.js.map","import { Request, Response } from 'express'\nimport type { UserSignupFields } from 'wasp/auth/providers/types'\nimport {\n  createProviderId,\n  createUser,\n  deleteUserByAuthId,\n  doFakeWork,\n  findAuthIdentity,\n  getProviderDataWithPassword,\n  rethrowPossibleAuthError,\n  sanitizeAndSerializeProviderData,\n  validateAndGetUserFields,\n} from 'wasp/auth/utils'\nimport {\n  ensurePasswordIsPresent,\n  ensureValidEmail,\n  ensureValidPassword,\n} from 'wasp/auth/validation'\nimport { HttpError } from 'wasp/server'\nimport { GetVerificationEmailContentFn } from 'wasp/server/auth/email'\nimport {\n  createEmailVerificationLink,\n  isEmailResendAllowed,\n  sendEmailVerificationEmail,\n} from 'wasp/server/auth/email/utils'\nimport { EmailFromField } from 'wasp/server/email/core/types'\nimport { onAfterSignupHook, onBeforeSignupHook } from '../../hooks.js'\n\nexport function getSignupRoute({\n  userSignupFields,\n  fromField,\n  clientRoute,\n  getVerificationEmailContent,\n  isEmailAutoVerified,\n}: {\n  userSignupFields?: UserSignupFields\n  fromField: EmailFromField\n  clientRoute: string\n  getVerificationEmailContent: GetVerificationEmailContentFn\n  isEmailAutoVerified: boolean\n}) {\n  return async function signup(\n    req: Request<{ email: string; password: string }>,\n    res: Response,\n  ): Promise<void> {\n    const fields = req.body\n    ensureValidArgs(fields)\n\n    const providerId = createProviderId('email', fields.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    /**\n     *\n     * There are two cases to consider in the case of an existing user:\n     * - if we allow unverified login\n     * - if the user is already verified\n     *\n     * Let's see what happens when we **don't** allow unverified login:\n     *\n     * We are handling the case of an existing auth identity in two ways:\n     *\n     * 1. If the user already exists and is verified, we don't want\n     *   to leak that piece of info and instead we pretend that the user\n     *   was created successfully.\n     *    - This prevents the attacker from learning which emails already have\n     *        an account created.\n     *\n     * 2. If the user is not verified:\n     *   - We check when we last sent a verification email and if it was less than X seconds ago,\n     *     we don't send another one.\n     *   - If it was more than X seconds ago, we delete the user and create a new one.\n     *   - This prevents the attacker from creating an account with somebody\n     *     else's email address and therefore permanently making that email\n     *     address unavailable for later account creation (by real owner).\n     */\n    if (existingAuthIdentity) {\n      const providerData = getProviderDataWithPassword<'email'>(\n        existingAuthIdentity.providerData,\n      )\n\n      // TOOD: faking work makes sense if the time spent on faking the work matches the time\n      // it would take to send the email. Atm, the fake work takes obviously longer than sending\n      // the email!\n      if (providerData.isEmailVerified) {\n        await doFakeWork()\n        res.json({ success: true })\n        return\n      }\n\n      // TODO: we are still leaking information here since when we are faking work\n      // we are not checking if the email was sent or not!\n      const { isResendAllowed, timeLeft } = isEmailResendAllowed(\n        providerData,\n        'passwordResetSentAt',\n      )\n      if (!isResendAllowed) {\n        throw new HttpError(\n          400,\n          `Please wait ${timeLeft} secs before trying again.`,\n        )\n      }\n\n      try {\n        await deleteUserByAuthId(existingAuthIdentity.authId)\n      } catch (e: unknown) {\n        rethrowPossibleAuthError(e)\n      }\n    }\n\n    const userFields = await validateAndGetUserFields(fields, userSignupFields)\n\n    const newUserProviderData = await sanitizeAndSerializeProviderData<'email'>(\n      {\n        hashedPassword: fields.password,\n        isEmailVerified: isEmailAutoVerified ? true : false,\n        emailVerificationSentAt: null,\n        passwordResetSentAt: null,\n      },\n    )\n\n    try {\n      await onBeforeSignupHook({ req, providerId })\n      const user = await createUser(\n        providerId,\n        newUserProviderData,\n        // Using any here because we want to avoid TypeScript errors and\n        // rely on Prisma to validate the data.\n        userFields as any,\n      )\n      await onAfterSignupHook({ req, providerId, user })\n    } catch (e: unknown) {\n      rethrowPossibleAuthError(e)\n    }\n\n    // Wasp allows for auto-verification of emails in development mode to\n    // make writing e2e tests easier.\n    if (isEmailAutoVerified) {\n      res.json({ success: true })\n      return\n    }\n\n    const verificationLink = await createEmailVerificationLink(\n      fields.email,\n      clientRoute,\n    )\n    try {\n      await sendEmailVerificationEmail(fields.email, {\n        from: fromField,\n        to: fields.email,\n        ...getVerificationEmailContent({ verificationLink }),\n      })\n    } catch (e: unknown) {\n      console.error('Failed to send email verification email:', e)\n      throw new HttpError(500, 'Failed to send email verification email.')\n    }\n\n    res.json({ success: true })\n  }\n}\n\nfunction ensureValidArgs(args: object): void {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n}\n","import { Request, Response } from 'express';\nimport {\n    createProviderId,\n    findAuthIdentity,\n    doFakeWork,\n    getProviderDataWithPassword,\n} from 'wasp/auth/utils';\nimport {\n    createPasswordResetLink,\n    sendPasswordResetEmail,\n    isEmailResendAllowed,\n} from \"wasp/server/auth/email/utils\";\nimport { ensureValidEmail } from 'wasp/auth/validation';\nimport type { EmailFromField } from 'wasp/server/email/core/types';\nimport { GetPasswordResetEmailContentFn } from 'wasp/server/auth/email';\nimport { HttpError } from 'wasp/server';\n\nexport function getRequestPasswordResetRoute({\n   fromField,\n   clientRoute,\n   getPasswordResetEmailContent,\n}: {\n    fromField: EmailFromField;\n    clientRoute: string;\n    getPasswordResetEmailContent: GetPasswordResetEmailContentFn;\n}) {\n    return async function requestPasswordReset(\n        req: Request<{ email: string; }>,\n        res: Response,\n    ): Promise<void> {\n        const args = req.body ?? {};\n        ensureValidEmail(args);\n\n        const authIdentity = await findAuthIdentity(\n            createProviderId(\"email\", args.email),\n        );\n\n        /**\n         * By doing fake work, we make it harder to enumerate users by measuring\n         * the time it takes to respond. If we would respond immediately, an attacker\n         * could measure the time it takes to respond and figure out if the user exists.\n         */\n\n        if (!authIdentity) {\n            await doFakeWork();\n            res.json({ success: true });\n            return\n        }\n\n        const providerData = getProviderDataWithPassword<'email'>(authIdentity.providerData);\n        const { isResendAllowed, timeLeft } = isEmailResendAllowed(providerData, 'passwordResetSentAt');\n        if (!isResendAllowed) {\n            throw new HttpError(400, `Please wait ${timeLeft} secs before trying again.`);\n        }\n\n        const passwordResetLink = await createPasswordResetLink(args.email, clientRoute);\n        try {\n            const email = authIdentity.providerUserId\n            await sendPasswordResetEmail(\n                email,\n                {\n                    from: fromField,\n                    to: email,\n                    ...getPasswordResetEmailContent({ passwordResetLink }),\n                },\n            );\n        } catch (e: any) {\n            console.error(\"Failed to send password reset email:\", e);\n            throw new HttpError(500, \"Failed to send password reset email.\");\n        }\n    \n        res.json({ success: true });\n    };\n}\n","import { Request, Response } from 'express';\nimport {\n    createProviderId,\n    findAuthIdentity,\n    updateAuthIdentityProviderData,\n    getProviderDataWithPassword,\n} from 'wasp/auth/utils';\nimport { validateJWT } from 'wasp/auth/jwt'\nimport { ensureTokenIsPresent, ensurePasswordIsPresent, ensureValidPassword } from 'wasp/auth/validation';\nimport { HttpError } from 'wasp/server';\n\nexport async function resetPassword(\n    req: Request<{ token: string; password: string; }>,\n    res: Response,\n): Promise<void> {\n    const args = req.body ?? {};\n    ensureValidArgs(args);\n\n    const { token, password } = args;\n    const { email } = await validateJWT<{ email: string }>(token)\n        .catch(() => {\n            throw new HttpError(400, \"Password reset failed, invalid token\");\n        });\n\n    const providerId = createProviderId('email', email);\n    const authIdentity = await findAuthIdentity(providerId);\n    if (!authIdentity) {\n        throw new HttpError(400, \"Password reset failed, invalid token\");\n    }\n\n    const providerData = getProviderDataWithPassword<'email'>(authIdentity.providerData);\n\n    await updateAuthIdentityProviderData(providerId, providerData, {\n        // The act of resetting the password verifies the email\n        isEmailVerified: true,\n        // The password will be hashed when saving the providerData\n        // in the DB\n        hashedPassword: password,\n    });\n\n    res.json({ success: true });\n};\n\nfunction ensureValidArgs(args: object): void {\n    ensureTokenIsPresent(args);\n    ensurePasswordIsPresent(args);\n    ensureValidPassword(args);\n}\n","import { Request, Response } from 'express';\nimport { validateJWT } from 'wasp/auth/jwt';\nimport {\n  createProviderId,\n  findAuthIdentity,\n  findAuthWithUserBy,\n  getProviderDataWithPassword,\n  updateAuthIdentityProviderData,\n} from 'wasp/auth/utils';\nimport { HttpError } from 'wasp/server';\nimport { onAfterEmailVerifiedHook } from '../../hooks.js';\n\n\nexport async function verifyEmail(\n    req: Request<{ token: string }>,\n    res: Response,\n): Promise<void> {\n    const { token } = req.body;\n    const { email } = await validateJWT<{ email: string }>(token)\n        .catch(() => {\n            throw new HttpError(400, \"Email verification failed, invalid token\");\n        });\n\n    const providerId = createProviderId('email', email);\n    const authIdentity = await findAuthIdentity(providerId);\n    if (!authIdentity) {\n        throw new HttpError(400, \"Email verification failed, invalid token\");\n    }\n\n    const providerData = getProviderDataWithPassword<'email'>(authIdentity.providerData);\n\n    await updateAuthIdentityProviderData(providerId, providerData, {\n        isEmailVerified: true,\n    });\n\n    const auth = await findAuthWithUserBy({ id: authIdentity.authId })\n\n    await onAfterEmailVerifiedHook({ req, email, user: auth.user });\n\n    res.json({ success: true });\n};\n\n","// PUBLIC API\nexport function defineUserSignupFields(fields) {\n    return fields;\n}\n//# sourceMappingURL=types.js.map","import { z } from 'zod';\nimport { defineUserSignupFields } from 'wasp/auth/providers/types';\n\nconst adminEmails = process.env.ADMIN_EMAILS?.split(',') || [];\n\nconst emailDataSchema = z.object({\n  email: z.string(),\n});\n\nexport const getEmailUserFields = defineUserSignupFields({\n  email: (data) => {\n    const emailData = emailDataSchema.parse(data);\n    return emailData.email;\n  },\n  username: (data) => {\n    const emailData = emailDataSchema.parse(data);\n    return emailData.email;\n  },\n  isAdmin: (data) => {\n    const emailData = emailDataSchema.parse(data);\n    return adminEmails.includes(emailData.email);\n  },\n});\n\nconst githubDataSchema = z.object({\n  profile: z.object({\n    emails: z\n      .array(\n        z.object({\n          email: z.string(),\n          verified: z.boolean(),\n        })\n      )\n      .min(1, 'You need to have an email address associated with your GitHub account to sign up.'),\n    login: z.string(),\n  }),\n});\n\nexport const getGitHubUserFields = defineUserSignupFields({\n  email: (data) => {\n    const githubData = githubDataSchema.parse(data);\n    return getGithubEmailInfo(githubData).email;\n  },\n  username: (data) => {\n    const githubData = githubDataSchema.parse(data);\n    return githubData.profile.login;\n  },\n  isAdmin: (data) => {\n    const githubData = githubDataSchema.parse(data);\n    const emailInfo = getGithubEmailInfo(githubData);\n    if (!emailInfo.verified) {\n      return false;\n    }\n    return adminEmails.includes(emailInfo.email);\n  },\n});\n\n// We are using the first email from the list of emails returned by GitHub.\n// If you want to use a different email, you can modify this function.\nfunction getGithubEmailInfo(githubData: z.infer<typeof githubDataSchema>) {\n  return githubData.profile.emails[0];\n}\n\n// NOTE: if we don't want to access users' emails, we can use scope [\"user:read\"]\n// instead of [\"user\"] and access args.profile.username instead\nexport function getGitHubAuthConfig() {\n  return {\n    scopes: ['user'],\n  };\n}\n\nconst googleDataSchema = z.object({\n  profile: z.object({\n    email: z.string(),\n    email_verified: z.boolean(),\n  }),\n});\n\nexport const getGoogleUserFields = defineUserSignupFields({\n  email: (data) => {\n    const googleData = googleDataSchema.parse(data);\n    return googleData.profile.email;\n  },\n  username: (data) => {\n    const googleData = googleDataSchema.parse(data);\n    return googleData.profile.email;\n  },\n  isAdmin: (data) => {\n    const googleData = googleDataSchema.parse(data);\n    if (!googleData.profile.email_verified) {\n      return false;\n    }\n    return adminEmails.includes(googleData.profile.email);\n  },\n});\n\nexport function getGoogleAuthConfig() {\n  return {\n    scopes: ['profile', 'email'], // must include at least 'profile' for Google\n  };\n}\n\nconst discordDataSchema = z.object({\n  profile: z.object({\n    username: z.string(),\n    email: z.string().email().nullable(),\n    verified: z.boolean().nullable(),\n  }),\n});\n\nexport const getDiscordUserFields = defineUserSignupFields({\n  email: (data) => {\n    const discordData = discordDataSchema.parse(data);\n    // Users need to have an email for payment processing.\n    if (!discordData.profile.email) {\n      throw new Error('You need to have an email address associated with your Discord account to sign up.');\n    }\n    return discordData.profile.email;\n  },\n  username: (data) => {\n    const discordData = discordDataSchema.parse(data);\n    return discordData.profile.username;\n  },\n  isAdmin: (data) => {\n    const discordData = discordDataSchema.parse(data);\n    if (!discordData.profile.email || !discordData.profile.verified) {\n      return false;\n    }\n    return adminEmails.includes(discordData.profile.email);\n  },\n});\n\nexport function getDiscordAuthConfig() {\n  return {\n    scopes: ['identify', 'email'],\n  };\n}\n","import { type GetVerificationEmailContentFn, type GetPasswordResetEmailContentFn } from 'wasp/server/auth';\n\nexport const getVerificationEmailContent: GetVerificationEmailContentFn = ({ verificationLink }) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n});\n\nexport const getPasswordResetEmailContent: GetPasswordResetEmailContentFn = ({ passwordResetLink }) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n});\n","import { Router } from \"express\";\n\nimport { ProviderConfig } from \"wasp/auth/providers/types\";\nimport type { EmailFromField } from \"wasp/server/email/core/types\";\n\nimport { getLoginRoute } from \"../email/login.js\";\nimport { getSignupRoute } from \"../email/signup.js\";\nimport { getRequestPasswordResetRoute } from \"../email/requestPasswordReset.js\";\nimport { resetPassword } from \"../email/resetPassword.js\";\nimport { verifyEmail } from \"../email/verifyEmail.js\";\nimport { GetVerificationEmailContentFn, GetPasswordResetEmailContentFn } from \"wasp/server/auth/email\";\nimport { defineHandler } from \"wasp/server/utils\";\nimport { env } from \"wasp/server\";\n\nimport { getEmailUserFields } from '../../../../../../../src/auth/userSignupFields'\nconst _waspUserSignupFields = getEmailUserFields\n\nimport { getVerificationEmailContent } from '../../../../../../../src/auth/email-and-pass/emails'\nconst _waspGetVerificationEmailContent: GetVerificationEmailContentFn = getVerificationEmailContent;\nimport { getPasswordResetEmailContent } from '../../../../../../../src/auth/email-and-pass/emails'\nconst _waspGetPasswordResetEmailContent: GetPasswordResetEmailContentFn = getPasswordResetEmailContent;\n\n\nconst fromField: EmailFromField = {\n    name: 'Open SaaS App',\n    email: 'me@example.com',\n};\n\nconst config: ProviderConfig = {\n    id: \"email\",\n    displayName: \"Email and password\",\n    createRouter() {\n        const router = Router();\n\n        const loginRoute = defineHandler(getLoginRoute());\n        router.post('/login', loginRoute);\n\n        const signupRoute = defineHandler(getSignupRoute({\n            userSignupFields: _waspUserSignupFields,\n            fromField,\n            clientRoute: '/email-verification',\n            getVerificationEmailContent: _waspGetVerificationEmailContent,\n            isEmailAutoVerified: false,\n        }));\n        router.post('/signup', signupRoute);\n\n        const requestPasswordResetRoute = defineHandler(getRequestPasswordResetRoute({\n            fromField,\n            clientRoute: '/password-reset',\n            getPasswordResetEmailContent: _waspGetPasswordResetEmailContent,\n        }));\n        router.post('/request-password-reset', requestPasswordResetRoute);\n\n        router.post('/reset-password', defineHandler(resetPassword));\n        router.post('/verify-email', defineHandler(verifyEmail));\n\n        return router;\n    },\n}\n\nexport default config;\n","import { Router } from \"express\";\n\nimport email from './config/email.js'\n\nconst providers = [\n  email,\n];\n\nconst router = Router();\n\n\nfor (const provider of providers) {\n  const { createRouter } = provider;\n  const providerRouter = createRouter(provider);\n  router.use(`/${provider.id}`, providerRouter);\n  console.log(`🚀 \"${provider.displayName}\" auth initialized`);\n}\n\nexport default router;\n","import express from 'express'\n\nimport auth from 'wasp/core/auth'\nimport me from './me.js'\nimport logout from './logout.js'\n\nimport providersRouter from '../../auth/providers/index.js'\n\nconst router = express.Router()\n\nrouter.get('/me', auth, me)\nrouter.post('/logout', auth, logout)\nrouter.use('/', providersRouter)\n\nexport default router\n","import { paymentProcessor } from './paymentProcessor';\n\nexport const paymentsWebhook = paymentProcessor.webhook;\nexport const paymentsMiddlewareConfigFn = paymentProcessor.webhookMiddlewareConfigFn;\n","import express from 'express'\nimport { prisma } from 'wasp/server'\nimport { defineHandler } from 'wasp/server/utils'\nimport { MiddlewareConfigFn, globalMiddlewareConfigForExpress } from '../../middleware/index.js'\nimport auth from 'wasp/core/auth'\nimport { type AuthUserData, makeAuthUserIfPossible } from 'wasp/auth/user'\n\n\nimport { paymentsWebhook as _wasppaymentsWebhookfn } from '../../../../../../src/payment/webhook'\nimport { paymentsMiddlewareConfigFn as _wasppaymentsWebhookmiddlewareConfigFn } from '../../../../../../src/payment/webhook'\n\nconst idFn: MiddlewareConfigFn = x => x\n\n\nconst router = express.Router()\n\n\nconst paymentsWebhookMiddleware = globalMiddlewareConfigForExpress(_wasppaymentsWebhookmiddlewareConfigFn)\nrouter.post(\n  '/payments-webhook',\n  [auth, ...paymentsWebhookMiddleware],\n  defineHandler(\n    (\n      req: Parameters<typeof _wasppaymentsWebhookfn>[0] & { user: AuthUserData | null },\n      res: Parameters<typeof _wasppaymentsWebhookfn>[1],\n    ) => {\n      const context = {\n        user: makeAuthUserIfPossible(req.user),\n        entities: {\n          User: prisma.user,\n        },\n      }\n      return _wasppaymentsWebhookfn(req, res, context)\n    }\n  )\n)\n\nexport default router\n","import express from 'express'\nimport operations from './operations/index.js'\nimport { globalMiddlewareConfigForExpress } from '../middleware/index.js'\nimport auth from './auth/index.js'\nimport apis from './apis/index.js'\n\n\nconst router = express.Router()\nconst middleware = globalMiddlewareConfigForExpress()\n\nrouter.get('/', middleware, function (_req, res) {\n  res.status(200).send();\n})\n\nrouter.use('/auth', middleware, auth)\nrouter.use('/operations', middleware, operations)\n// NOTE: Keep user-defined api routes last so they cannot override our routes.\n// Additionally, do not add middleware to these routes here. Instead, we add\n// it later to allow for middleware customization.\nrouter.use(apis)\n\nexport default router\n","import express from 'express'\n\nimport { HttpError } from 'wasp/server'\nimport indexRouter from './routes/index.js'\n\n// TODO: Consider extracting most of this logic into createApp(routes, path) function so that\n//   it can be used in unit tests to test each route individually.\n\nconst app = express()\n\n// NOTE: Middleware are installed on a per-router or per-route basis.\n\napp.use('/', indexRouter)\n\n// Custom error handler.\napp.use((err, _req, res, next) => {\n  // As by expressjs documentation, when the headers have already\n  // been sent to the client, we must delegate to the default error handler.\n  if (res.headersSent) { return next(err) }\n\n  if (err instanceof HttpError) {\n    return res.status(err.statusCode).json({ message: err.message, data: err.data })\n  }\n\n  // This forwards the error to the default express error handler.\n  // As described by expressjs documentation, the default error handler sets response status\n  // to err.status or err.statusCode if it is 4xx or 5xx, and if not, sets it to 500.\n  // It won't add any more info to it if server is running in production, which is exactly what we want,\n  // we want to share as little info as possible when error happens in production, for security reasons,\n  // so they will get only status code if set, or 500 if not, no extra info.\n  // In development it will also share the error stack though, which is useful.\n  // If the user wants to put more information about the error into the response, they should use HttpError.\n  return next(err)\n})\n\nexport default app\n","import PgBoss from 'pg-boss';\nimport { config, env } from '../../../index.js';\nconst boss = createPgBoss();\nfunction createPgBoss() {\n    let pgBossNewOptions = {\n        connectionString: config.databaseUrl,\n    };\n    // Add an escape hatch for advanced configuration of pg-boss to overwrite our defaults.\n    if (env.PG_BOSS_NEW_OPTIONS) {\n        try {\n            pgBossNewOptions = JSON.parse(env.PG_BOSS_NEW_OPTIONS);\n        }\n        catch {\n            console.error('Environment variable PG_BOSS_NEW_OPTIONS was not parsable by JSON.parse()!');\n        }\n    }\n    return new PgBoss(pgBossNewOptions);\n}\nlet resolvePgBossStarted;\nlet rejectPgBossStarted;\n// PRIVATE API\n// Code that wants to access pg-boss must wait until it has been started.\nexport const pgBossStarted = new Promise((resolve, reject) => {\n    resolvePgBossStarted = resolve;\n    rejectPgBossStarted = reject;\n});\nvar PgBossStatus;\n(function (PgBossStatus) {\n    PgBossStatus[\"Unstarted\"] = \"Unstarted\";\n    PgBossStatus[\"Starting\"] = \"Starting\";\n    PgBossStatus[\"Started\"] = \"Started\";\n    PgBossStatus[\"Error\"] = \"Error\";\n})(PgBossStatus || (PgBossStatus = {}));\nlet pgBossStatus = PgBossStatus.Unstarted;\n// PRIVATE API\n/**\n * Prepares the target PostgreSQL database and begins job monitoring.\n * If the required database objects do not exist in the specified database,\n * `boss.start()` will automatically create them.\n * Ref: https://github.com/timgit/pg-boss/blob/master/docs/readme.md#start\n *\n * After making this call, we can send pg-boss jobs and they will be persisted and acted upon.\n * This should only be called once during a server's lifetime.\n */\nexport async function startPgBoss() {\n    // Ensure pg-boss can only be started once during a server's lifetime.\n    if (pgBossStatus !== PgBossStatus.Unstarted) {\n        return;\n    }\n    pgBossStatus = PgBossStatus.Starting;\n    console.log('Starting pg-boss...');\n    boss.on('error', (error) => console.error(error));\n    try {\n        await boss.start();\n    }\n    catch (error) {\n        console.error('pg-boss failed to start!');\n        console.error(error);\n        pgBossStatus = PgBossStatus.Error;\n        rejectPgBossStarted(boss);\n        return;\n    }\n    resolvePgBossStarted(boss);\n    console.log('pg-boss started!');\n    pgBossStatus = PgBossStatus.Started;\n}\n//# sourceMappingURL=pgBoss.js.map","/**\n * This is a definition of a job (think draft or invocable computation), not the running instance itself.\n * This can be submitted one or more times to be executed by some job executor via the same instance.\n * Once submitted, you get a SubmittedJob to track it later.\n */\nexport class Job {\n    jobName;\n    executorName;\n    constructor(jobName, executorName) {\n        this.jobName = jobName;\n        this.executorName = executorName;\n    }\n}\n/**\n * This is the result of submitting a Job to some executor.\n * It can be used by callers to track things, or call executor-specific subclass functionality.\n */\nexport class SubmittedJob {\n    job;\n    jobId;\n    constructor(job, jobId) {\n        this.job = job;\n        this.jobId = jobId;\n    }\n}\n//# sourceMappingURL=job.js.map","import { pgBossStarted } from './pgBoss.js';\nimport { Job, SubmittedJob } from '../job.js';\nexport const PG_BOSS_EXECUTOR_NAME = Symbol('PgBoss');\n// PRIVATE API\n/**\n * Creates an instance of PgBossJob which contains all of the necessary\n * information to submit a job to pg-boss.\n */\nexport function createJobDefinition({ jobName, defaultJobOptions, jobSchedule, entities, }) {\n    return new PgBossJob(jobName, defaultJobOptions, entities, jobSchedule);\n}\n// PRIVATE API\n/**\n * Uses the info about a job in PgBossJob to register a user defined job handler with pg-boss.\n * We expect this to be called once per job name. If called multiple times with the same name and different\n * functions, we will override the previous calls.\n */\nexport function registerJob({ job, jobFn }) {\n    // NOTE(shayne): We are not awaiting `pgBossStarted` here since we need to return an instance to the job\n    // template, or else the NodeJS module bootstrapping process will block and fail as it would then depend\n    // on a runtime resolution of the promise in `startServer()`.\n    // Since `pgBossStarted` will resolve in the future, it may appear possible to send pg-boss\n    // a job before we actually have registered the handler via `boss.work()`. However, even if NodeJS does\n    // not execute this callback before any job `submit()` calls, this is not a problem since pg-boss allows you\n    // to submit jobs even if there are no workers registered.\n    // Once they are registered, they will just start on the first job in their queue.\n    pgBossStarted.then(async (boss) => {\n        // As a safety precaution against undefined behavior of registering different\n        // functions for the same job name, remove all registered functions first.\n        await boss.offWork(job.jobName);\n        // This tells pg-boss to run given worker function when job with that name is submitted.\n        // Ref: https://github.com/timgit/pg-boss/blob/master/docs/readme.md#work\n        await boss.work(job.jobName, pgBossCallbackWrapper(jobFn, job.entities));\n        // If a job schedule is provided, we should schedule the recurring job.\n        // If the schedule name already exists, it's updated to the provided cron expression, arguments, and options.\n        // Ref: https://github.com/timgit/pg-boss/blob/master/docs/readme.md#scheduling\n        if (job.jobSchedule) {\n            const options = {\n                ...job.defaultJobOptions,\n                ...job.jobSchedule.options,\n            };\n            await boss.schedule(job.jobName, job.jobSchedule.cron, job.jobSchedule.args, options);\n        }\n    });\n}\n/**\n * This is an interface repesenting a job that can be submitted to pg-boss.\n * It is not yet submitted until the caller invokes `submit()` on an instance.\n * The caller can make as many calls to `submit()` as they wish.\n */\nexport class PgBossJob extends Job {\n    defaultJobOptions;\n    startAfter;\n    entities;\n    jobSchedule;\n    constructor(jobName, defaultJobOptions, entities, jobSchedule, startAfter) {\n        super(jobName, PG_BOSS_EXECUTOR_NAME);\n        this.defaultJobOptions = defaultJobOptions;\n        this.entities = entities;\n        this.jobSchedule = jobSchedule;\n        this.startAfter = startAfter;\n    }\n    delay(startAfter) {\n        return new PgBossJob(this.jobName, this.defaultJobOptions, this.entities, this.jobSchedule, startAfter);\n    }\n    async submit(jobArgs, jobOptions = {}) {\n        const boss = await pgBossStarted;\n        const jobId = await boss.send(this.jobName, jobArgs, {\n            ...this.defaultJobOptions,\n            ...(this.startAfter && { startAfter: this.startAfter }),\n            ...jobOptions,\n        });\n        return new PgBossSubmittedJob(boss, this, jobId);\n    }\n}\n/**\n * A pg-boss specific SubmittedJob that adds additional pg-boss functionality.\n */\nclass PgBossSubmittedJob extends SubmittedJob {\n    pgBoss;\n    constructor(boss, job, jobId) {\n        super(job, jobId);\n        this.pgBoss = {\n            cancel: () => boss.cancel(jobId),\n            resume: () => boss.resume(jobId),\n            // Coarcing here since pg-boss typings are not precise enough.\n            details: () => boss.getJobById(jobId),\n        };\n    }\n}\n/**\n * Wraps the normal pg-boss callback function to inject entities, as well as extract\n * the `data` property so the arguments passed into the job are the exact same as those received.\n */\nfunction pgBossCallbackWrapper(\n// jobFn - The user-defined async job callback function.\njobFn, \n// Entities used by job, passed into callback context.\nentities) {\n    return (args) => {\n        const context = { entities };\n        return jobFn(args.data, context);\n    };\n}\n//# sourceMappingURL=pgBossJob.js.map","const PLAUSIBLE_API_KEY = process.env.PLAUSIBLE_API_KEY!;\nconst PLAUSIBLE_SITE_ID = process.env.PLAUSIBLE_SITE_ID!;\nconst PLAUSIBLE_BASE_URL = process.env.PLAUSIBLE_BASE_URL;\n\nconst headers = {\n  'Content-Type': 'application/json',\n  Authorization: `Bearer ${PLAUSIBLE_API_KEY}`,\n};\n\ntype PageViewsResult = {\n  results: {\n    [key: string]: {\n      value: number;\n    };\n  };\n};\n\ntype PageViewSourcesResult = {\n  results: [\n    {\n      source: string;\n      visitors: number;\n    }\n  ];\n};\n\nexport async function getDailyPageViews() {\n  const totalViews = await getTotalPageViews();\n  const prevDayViewsChangePercent = await getPrevDayViewsChangePercent();\n\n  return {\n    totalViews,\n    prevDayViewsChangePercent,\n  };\n}\n\nasync function getTotalPageViews() {\n  const response = await fetch(\n    `${PLAUSIBLE_BASE_URL}/v1/stats/aggregate?site_id=${PLAUSIBLE_SITE_ID}&metrics=pageviews`,\n    {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${PLAUSIBLE_API_KEY}`,\n      },\n    }\n  );\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  const json = (await response.json()) as PageViewsResult;\n\n  return json.results.pageviews.value;\n}\n\nasync function getPrevDayViewsChangePercent() {\n  // Calculate today, yesterday, and the day before yesterday's dates\n  const today = new Date();\n  const yesterday = new Date(today.setDate(today.getDate() - 1)).toISOString().split('T')[0];\n  const dayBeforeYesterday = new Date(new Date().setDate(new Date().getDate() - 2)).toISOString().split('T')[0];\n\n  // Fetch page views for yesterday and the day before yesterday\n  const pageViewsYesterday = await getPageviewsForDate(yesterday);\n  const pageViewsDayBeforeYesterday = await getPageviewsForDate(dayBeforeYesterday);\n\n  console.table({\n    pageViewsYesterday,\n    pageViewsDayBeforeYesterday,\n    typeY: typeof pageViewsYesterday,\n    typeDBY: typeof pageViewsDayBeforeYesterday,\n  });\n\n  let change = 0;\n  if (pageViewsYesterday === 0 || pageViewsDayBeforeYesterday === 0) {\n    return '0';\n  } else {\n    change = ((pageViewsYesterday - pageViewsDayBeforeYesterday) / pageViewsDayBeforeYesterday) * 100;\n  }\n  return change.toFixed(0);\n}\n\nasync function getPageviewsForDate(date: string) {\n  const url = `${PLAUSIBLE_BASE_URL}/v1/stats/aggregate?site_id=${PLAUSIBLE_SITE_ID}&period=day&date=${date}&metrics=pageviews`;\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: headers,\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  const data = (await response.json()) as PageViewsResult;\n  return data.results.pageviews.value;\n}\n\nexport async function getSources() {\n  const url = `${PLAUSIBLE_BASE_URL}/v1/stats/breakdown?site_id=${PLAUSIBLE_SITE_ID}&property=visit:source&metrics=visitors`;\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: headers,\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  const data = (await response.json()) as PageViewSourcesResult;\n  return data.results;\n}\n","import { type DailyStats } from 'wasp/entities';\nimport { type DailyStatsJob } from 'wasp/server/jobs';\nimport Stripe from 'stripe';\nimport { stripe } from '../payment/stripe/stripeClient';\nimport { listOrders } from '@lemonsqueezy/lemonsqueezy.js';\nimport { getDailyPageViews, getSources } from './providers/plausibleAnalyticsUtils';\n// import { getDailyPageViews, getSources } from './providers/googleAnalyticsUtils';\nimport { paymentProcessor } from '../payment/paymentProcessor';\nimport { SubscriptionStatus } from '../payment/plans';\n\nexport type DailyStatsProps = { dailyStats?: DailyStats; weeklyStats?: DailyStats[]; isLoading?: boolean };\n\nexport const calculateDailyStats: DailyStatsJob<never, void> = async (_args, context) => {\n  const nowUTC = new Date(Date.now());\n  nowUTC.setUTCHours(0, 0, 0, 0);\n\n  const yesterdayUTC = new Date(nowUTC);\n  yesterdayUTC.setUTCDate(yesterdayUTC.getUTCDate() - 1);\n\n  try {\n    const yesterdaysStats = await context.entities.DailyStats.findFirst({\n      where: {\n        date: {\n          equals: yesterdayUTC,\n        },\n      },\n    });\n\n    const userCount = await context.entities.User.count({});\n    // users can have paid but canceled subscriptions which terminate at the end of the period\n    // we don't want to count those users as current paying users\n    const paidUserCount = await context.entities.User.count({\n      where: {\n        subscriptionStatus: SubscriptionStatus.Active,\n      },\n    });\n\n    let userDelta = userCount;\n    let paidUserDelta = paidUserCount;\n    if (yesterdaysStats) {\n      userDelta -= yesterdaysStats.userCount;\n      paidUserDelta -= yesterdaysStats.paidUserCount;\n    }\n\n    let totalRevenue;\n    switch (paymentProcessor.id) {\n      case 'stripe':\n        totalRevenue = await fetchTotalStripeRevenue();\n        break;\n      case 'lemonsqueezy':\n        totalRevenue = await fetchTotalLemonSqueezyRevenue();\n        break;\n      default:\n        throw new Error(`Unsupported payment processor: ${paymentProcessor.id}`);\n    }\n\n    const { totalViews, prevDayViewsChangePercent } = await getDailyPageViews();\n\n    let dailyStats = await context.entities.DailyStats.findUnique({\n      where: {\n        date: nowUTC,\n      },\n    });\n\n    if (!dailyStats) {\n      console.log('No daily stat found for today, creating one...');\n      dailyStats = await context.entities.DailyStats.create({\n        data: {\n          date: nowUTC,\n          totalViews,\n          prevDayViewsChangePercent,\n          userCount,\n          paidUserCount,\n          userDelta,\n          paidUserDelta,\n          totalRevenue,\n        },\n      });\n    } else {\n      console.log('Daily stat found for today, updating it...');\n      dailyStats = await context.entities.DailyStats.update({\n        where: {\n          id: dailyStats.id,\n        },\n        data: {\n          totalViews,\n          prevDayViewsChangePercent,\n          userCount,\n          paidUserCount,\n          userDelta,\n          paidUserDelta,\n          totalRevenue,\n        },\n      });\n    }\n    const sources = await getSources();\n\n    for (const source of sources) {\n      let visitors = source.visitors;\n      if (typeof source.visitors !== 'number') {\n        visitors = parseInt(source.visitors);\n      }\n      await context.entities.PageViewSource.upsert({\n        where: {\n          date_name: {\n            date: nowUTC,\n            name: source.source,\n          },\n        },\n        create: {\n          date: nowUTC,\n          name: source.source,\n          visitors,\n          dailyStatsId: dailyStats.id,\n        },\n        update: {\n          visitors,\n        },\n      });\n    }\n\n    console.table({ dailyStats });\n  } catch (error: any) {\n    console.error('Error calculating daily stats: ', error);\n    await context.entities.Logs.create({\n      data: {\n        message: `Error calculating daily stats: ${error?.message}`,\n        level: 'job-error',\n      },\n    });\n  }\n};\n\nasync function fetchTotalStripeRevenue() {\n  let totalRevenue = 0;\n  let params: Stripe.BalanceTransactionListParams = {\n    limit: 100,\n    // created: {\n    //   gte: startTimestamp,\n    //   lt: endTimestamp\n    // },\n    type: 'charge',\n  };\n\n  let hasMore = true;\n  while (hasMore) {\n    const balanceTransactions = await stripe.balanceTransactions.list(params);\n\n    for (const transaction of balanceTransactions.data) {\n      if (transaction.type === 'charge') {\n        totalRevenue += transaction.amount;\n      }\n    }\n\n    if (balanceTransactions.has_more) {\n      // Set the starting point for the next iteration to the last object fetched\n      params.starting_after = balanceTransactions.data[balanceTransactions.data.length - 1].id;\n    } else {\n      hasMore = false;\n    }\n  }\n\n  // Revenue is in cents so we convert to dollars (or your main currency unit)\n  return totalRevenue / 100;\n}\n\nasync function fetchTotalLemonSqueezyRevenue() {\n  try {\n    let totalRevenue = 0;\n    let hasNextPage = true;\n    let currentPage = 1;\n\n    while (hasNextPage) {\n      const { data: response } = await listOrders({\n        filter: {\n          storeId: process.env.LEMONSQUEEZY_STORE_ID,\n        },\n        page: {\n          number: currentPage,\n          size: 100,\n        },\n      });\n\n      if (response?.data) {\n        for (const order of response.data) {\n          totalRevenue += order.attributes.total;\n        }\n      }\n\n      hasNextPage = !response?.meta?.page.lastPage;\n      currentPage++;\n    }\n\n    // Revenue is in cents so we convert to dollars (or your main currency unit)\n    return totalRevenue / 100;\n  } catch (error) {\n    console.error('Error fetching Lemon Squeezy revenue:', error);\n    throw error;\n  }\n}\n","import { prisma } from 'wasp/server';\nimport { createJobDefinition } from 'wasp/server/jobs/core/pgBoss';\nconst entities = {\n    User: prisma.user,\n    DailyStats: prisma.dailyStats,\n    Logs: prisma.logs,\n    PageViewSource: prisma.pageViewSource,\n};\nconst jobSchedule = {\n    cron: \"0 * * * *\",\n    options: {},\n};\n// PUBLIC API\nexport const dailyStatsJob = createJobDefinition({\n    jobName: 'dailyStatsJob',\n    defaultJobOptions: {},\n    jobSchedule,\n    entities,\n});\n//# sourceMappingURL=dailyStatsJob.js.map","import { registerJob } from 'wasp/server/jobs/core/pgBoss'\nimport { calculateDailyStats } from '../../../../../src/analytics/stats'\nimport { dailyStatsJob as _waspJobDefinition } from 'wasp/server/jobs'\n\nregisterJob({\n  job: _waspJobDefinition,\n  jobFn: calculateDailyStats,\n})\n","import http from 'http'\n\nimport app from './app.js'\nimport { config } from 'wasp/server'\n\n\nimport { startPgBoss } from 'wasp/server/jobs/core/pgBoss'\nimport './jobs/core/allJobs.js'\n\n\nconst startServer = async () => {\n  await startPgBoss()\n\n  const port = normalizePort(config.port)\n  app.set('port', port)\n\n  const server = http.createServer(app)\n\n\n\n  server.listen(port)\n\n  server.on('error', (error: NodeJS.ErrnoException) => {\n    if (error.syscall !== 'listen') throw error\n    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges')\n      process.exit(1)\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use')\n      process.exit(1)\n    default:\n      throw error\n    }\n  })\n\n  server.on('listening', () => {\n    const addr = server.address()\n    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port\n    console.log('Server listening on ' + bind)\n  })\n}\n\nstartServer().catch(e => console.error(e))\n\n/**\n * Normalize a port into a number, string, or false.\n */\nfunction normalizePort (val) {\n  const port = parseInt(val, 10)\n  if (isNaN(port)) return val // named pipe\n  if (port >= 0) return port // port number\n  return false\n}\n"],"names":["config","InternalPrismaClient","prisma","auth","SubscriptionStatus","PaymentPlanId","updateIsUserAdminById","getPaginatedUsers","generateChatbotResponse","initEmailSender","z","planId","generateCheckoutSession","getCustomerPortalUrl","createFile","getAllFilesByUser","getDownloadFileSignedURL","getDailyStats","router","ensureValidArgs","waspServerConfig","email","providersRouter","_wasppaymentsWebhookmiddlewareConfigFn","_wasppaymentsWebhookfn","operations","apis","indexRouter","PgBossStatus","_waspJobDefinition"],"mappings":"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"}